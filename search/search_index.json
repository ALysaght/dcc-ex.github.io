{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DCC++ EX An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology. Our Mission Our mission is to open the world of model railroading and make it universally accesible. In order to achieve that, DCC++ EX is providing the model railroad community with a complete, open source DCC (Digital Command Control) system - one that is simple, affordable, and expandable, to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future. What is DCC++ EX? In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. A basic DCC++ EX system can use easy to find, widely avalable Arduino boards that you can plug in yourself. You may even have one sitting around in your project drawer! Or, you can use our FireBox Control Station for something that is just plug-and-play. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes What's new in DCC++ EX? Complete support for all the old commands and front ends like JMRI Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) Simpler, modular, faster code with an API Library for developers for easy expansion No more jumpers or soldering! (Beta) New features and functionsn in JMRI (coming) Automation (Alpha) NOTE: The Next release will be a major rewrite to the code. We started from scratch and are rebuilding from the ground up! For what that means to you, click HERE . The system consists of multiple parts: Command Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the your command station There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"Home"},{"location":"#welcome-to-dcc-ex","text":"An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology.","title":"Welcome to DCC++ EX"},{"location":"#our-mission","text":"Our mission is to open the world of model railroading and make it universally accesible. In order to achieve that, DCC++ EX is providing the model railroad community with a complete, open source DCC (Digital Command Control) system - one that is simple, affordable, and expandable, to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future.","title":"Our Mission"},{"location":"#what-is-dcc-ex","text":"In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. A basic DCC++ EX system can use easy to find, widely avalable Arduino boards that you can plug in yourself. You may even have one sitting around in your project drawer! Or, you can use our FireBox Control Station for something that is just plug-and-play. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes","title":"What is DCC++ EX?"},{"location":"#whats-new-in-dcc-ex","text":"Complete support for all the old commands and front ends like JMRI Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) Simpler, modular, faster code with an API Library for developers for easy expansion No more jumpers or soldering! (Beta) New features and functionsn in JMRI (coming) Automation (Alpha) NOTE: The Next release will be a major rewrite to the code. We started from scratch and are rebuilding from the ground up! For what that means to you, click HERE .","title":"What's new in DCC++ EX?"},{"location":"#the-system-consists-of-multiple-parts","text":"Command Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the your command station There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"The system consists of multiple parts:"},{"location":"about/about-us/","text":"The DCC++ EX Project Who is behind all this? And will they ever face justice? Who knows, but the following is a list of those names associated with taking over the DCC++ Base Station Project and advancing it into the future as \"Command Station\". First, a special thanks to Gregg E. Berman who had the original idea for a model railroad Command Station using an Arduino Uno and a Motor Shield. If you want to read a short history of the project and what's changed over the years, click HERE (TODO - Create a link for this) What you see available for download here represents a complete rewrite of the code and the concept of what we (and what you tell us) DCC++ EX needs to be. You can seek us out here: TrainBoard DCC++ Forum Our Discord Server You can get support for DCC++ EX at either of the above links including live support on Discord. Names below in parenthesis are screen names on Trainboard and Discord Project Lead Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) DCC++ EX Lead Developers David Cutting - Park City, Utah, USA (David Cutting) Chris Harlow - Bournemouth UK (UKBloke) Developers Harald Barth Stockholm - Sweden (Haba) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Gregor Baues - \u00cele-de-France France (grbba) DCC++ Classic Lead Developers Mike Dunston - Sonora, California, USA (Atani) Fred Decker - Holly Springs, North Carolina USA (FlightRisk) Installer Software Lead Developers Anthony W - Dayton, Ohio USA (Dex, Dex++) Website Lead Developers Mani Kumar - Bangalor India (Mani / Mani Kumar) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Developers David Cutting - Park City, Utah, USA (David Cutting) Fred Decker - Holly Springs, North Carolina USA (FlightRisk) Documentation / Management Roger Beschizza - Dorset UK (Roger Beschizza) Keith Ledbetter - Chicago, Illinois USA (Keith Ledbetter) Kevin Smith - (KCSmith) Testing / Research / Support Sumner Patterson - Blanding, Utah, USA (Sumner) Larry Dribin - (H0Guy) Paul - Virginia USA (Paul1361) Gregor Baues - \u00cele-de-France France (grbba)","title":"Team"},{"location":"about/about-us/#the-dcc-ex-project","text":"Who is behind all this? And will they ever face justice? Who knows, but the following is a list of those names associated with taking over the DCC++ Base Station Project and advancing it into the future as \"Command Station\". First, a special thanks to Gregg E. Berman who had the original idea for a model railroad Command Station using an Arduino Uno and a Motor Shield. If you want to read a short history of the project and what's changed over the years, click HERE (TODO - Create a link for this) What you see available for download here represents a complete rewrite of the code and the concept of what we (and what you tell us) DCC++ EX needs to be. You can seek us out here: TrainBoard DCC++ Forum Our Discord Server You can get support for DCC++ EX at either of the above links including live support on Discord. Names below in parenthesis are screen names on Trainboard and Discord","title":"The DCC++ EX Project"},{"location":"about/about-us/#project-lead","text":"Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)","title":"Project Lead"},{"location":"about/about-us/#dcc-ex","text":"","title":"DCC++ EX"},{"location":"about/about-us/#lead-developers","text":"David Cutting - Park City, Utah, USA (David Cutting) Chris Harlow - Bournemouth UK (UKBloke)","title":"Lead Developers"},{"location":"about/about-us/#developers","text":"Harald Barth Stockholm - Sweden (Haba) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Gregor Baues - \u00cele-de-France France (grbba)","title":"Developers"},{"location":"about/about-us/#dcc-classic","text":"","title":"DCC++ Classic"},{"location":"about/about-us/#lead-developers_1","text":"Mike Dunston - Sonora, California, USA (Atani) Fred Decker - Holly Springs, North Carolina USA (FlightRisk)","title":"Lead Developers"},{"location":"about/about-us/#installer-software","text":"","title":"Installer Software"},{"location":"about/about-us/#lead-developers_2","text":"Anthony W - Dayton, Ohio USA (Dex, Dex++)","title":"Lead Developers"},{"location":"about/about-us/#website","text":"","title":"Website"},{"location":"about/about-us/#lead-developers_3","text":"Mani Kumar - Bangalor India (Mani / Mani Kumar) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)","title":"Lead Developers"},{"location":"about/about-us/#developers_1","text":"David Cutting - Park City, Utah, USA (David Cutting) Fred Decker - Holly Springs, North Carolina USA (FlightRisk)","title":"Developers"},{"location":"about/about-us/#documentation-management","text":"Roger Beschizza - Dorset UK (Roger Beschizza) Keith Ledbetter - Chicago, Illinois USA (Keith Ledbetter) Kevin Smith - (KCSmith)","title":"Documentation / Management"},{"location":"about/about-us/#testing-research-support","text":"Sumner Patterson - Blanding, Utah, USA (Sumner) Larry Dribin - (H0Guy) Paul - Virginia USA (Paul1361) Gregor Baues - \u00cele-de-France France (grbba)","title":"Testing / Research / Support"},{"location":"api/command-station-api/","text":"Command Station API The DCC++ EX System consists of a DCC++ Library and a Command Station program (or sketch in Arduino terms) that runs your Command Station. The library has its own application programming interface (API) that allows you to write your own version of a Command Station and to easily interface with DCC++ EX. The Command Station software itself uses the API functions to run your trains. Here is an example of how it works. Commands List General configuration and status functions getStatus() getPreamble() Waveform Control Functions setPower() setSignal() setBrake() NOTE: Work in progress. There are many more API functions","title":"Command Station"},{"location":"api/command-station-api/#command-station-api","text":"The DCC++ EX System consists of a DCC++ Library and a Command Station program (or sketch in Arduino terms) that runs your Command Station. The library has its own application programming interface (API) that allows you to write your own version of a Command Station and to easily interface with DCC++ EX. The Command Station software itself uses the API functions to run your trains. Here is an example of how it works.","title":"Command Station API"},{"location":"api/command-station-api/#commands-list","text":"","title":"Commands List"},{"location":"api/command-station-api/#general-configuration-and-status-functions","text":"getStatus() getPreamble()","title":"General configuration and status functions"},{"location":"api/command-station-api/#waveform-control-functions","text":"setPower() setSignal() setBrake() NOTE: Work in progress. There are many more API functions","title":"Waveform Control Functions"},{"location":"develop/command-station-dev/","text":"Base Station Development Work in progress","title":"Command Station"},{"location":"develop/command-station-dev/#base-station-development","text":"Work in progress","title":"Base Station Development"},{"location":"download/dccex-downloads/","text":"Download DCC++ EX Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option. Automated DCC++ EX / DCC++ Classic Installer Automated Installer Clicking above will download the DCC-EX installer for your OS. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board. Latest DCC++ EX Release Download Zip DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board. DCC++ EX GitHub Repository DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment. The Original \"Classic\" version The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. Note This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"DCC++ Basestation"},{"location":"download/dccex-downloads/#download-dcc-ex","text":"Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option.","title":"Download DCC++ EX"},{"location":"download/dccex-downloads/#automated-dcc-ex-dcc-classic-installer","text":"Automated Installer Clicking above will download the DCC-EX installer for your OS. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board.","title":"Automated DCC++ EX / DCC++ Classic Installer"},{"location":"download/dccex-downloads/#latest-dcc-ex-release-download-zip","text":"DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board.","title":"Latest DCC++ EX Release Download Zip"},{"location":"download/dccex-downloads/#dcc-ex-github-repository","text":"DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment.","title":"DCC++ EX GitHub Repository"},{"location":"download/dccex-downloads/#the-original-classic-version","text":"The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. Note This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"The Original \"Classic\" version"},{"location":"download/dccex-materials-downloads/","text":"Download DCC++ EX Materials Work in progress","title":"Materials"},{"location":"download/dccex-materials-downloads/#download-dcc-ex-materials","text":"Work in progress","title":"Download DCC++ EX Materials"},{"location":"hardware/ethernet-boards/","text":"coming soon","title":"Ethernet boards"},{"location":"hardware/i2c-displays/","text":"I2C Displays DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display. We currently support 16 column by 2 row (16x2) and 20 column by 4 row (20x4) LCD displays and the .96 and 1.3\" OLED displays. The LCD displays require a \"backpack\" that converts the raw display to I2C. I2C allows us to use just 2 lines (SDA (serial data) and clock (SCL)) to send text to the display. Without this board, we wouldn't have enough pins, especially on an Uno, to use a display. Examples of compatible displays Note You MUST make sure to order TWO (2) parts for your LCD Displays. You need the display AND a backpack based on the PCF7584 controller chip. Some display do come with this already soldered together. Make sure before you buy! Connecting an LCD Display Here is an example of a 20 x 4 LCD screen. They come in different colors like blue and green. The controller board (backpack) is shown before soldering it to the back of the display. Soldering is very simple since you just match the two boards together and quickly solder the pins. Though there are 16 of them. Figure 1 - 20 x 4 LCD with backpack And here is an example of a 16 x 2 Display with its backpack sitting above it. Remember to either order a display with the backpack already soldered or two order both pieces from your vendor and solder it yourself: Figure 2 - 16 x 2 LCD with backpack Soldering on the Backpack (if you purchased separate pieces) And here is a picture of the board after soldering or if you purchase a board already solderd (or \"welded\" as some of the Chinese sites call it) Figure 3 - LCD with backpack soldered to the back Connecting the Jumper Wires To connect the Display to the CS, you will need 4 male to female jumper wires: Connect a wire from +5V on the Motor Shield or WiFi Board to Vcc on the backpack Connect a wire from Gnd on the CS to Gnd on the backpack Connect SCL on the Arduino (pin x on the Mega, pin x on the Uno) to SCL on the backpack Connect SDA on the Arduino (pin x on the Mega, pin x on the Uno) to SDA on the backpack Installing the Software (LCD) There are two steps to install the software: Install the LiquidCrystal I2C library Edit the config.h file and upload the sketch to your CS Install the library To install the library, open the Arduino IDE and do the following: Select Tools -> Manage libraries Wait for the download to finish updating the list of libraries In the \"Filter your search...\" box, type \"liquidcrystal_i2c\" Scroll down the search results until you find the \"LiquidCrystal_I2C by Frank Brabander\" entry. Click on that library to select it Click \"Install\" Wait for the installation to finish. Click \"Close\" Once the library is installed on your computer, you don't have to install it again. Upload the sketch to your CS To upload the new sketch on your Command Station Open the Arduino IDE Open the CommandStation-EX project Open the config.h file (If you haven't renambed config.example.h to config.h do this now) Find the line that says: // define LCD_DRIVER for I2C LCD address 0x3f,16 cols, 2 rows #define LCD_DRIVER 0x3F,16,2 make sure to uncomment this line if it has 2 slashes in front of it by removing them. Find the 4 characters that start with 0x and add the address for your I2C backpack after it. We default to 3F, but your display may be 27. The text would read 0x27 if that was the case. In the next field, enter the number of columns in your dispay. The default is 16. If you have a 20 row display, enter that instead. In the last field, enter the number of rows in your display. We default to a 2 line display. If you have a 4 line display, change this to 4. Save the file Make sure to connect the Arduino to your computer with the USB cable and click the upload button to compile and upload the updated Command Station sketch. Connecting an OLED display OLED displays come in more varieties than LCD displays. The library to run them also takes more memory. Therefore, OLED displays won't work with an UNO. You will require a Mega. Here are some examples of OLED displays: Figure 3 - Adafruit .96\" OLED Display Figure 3 - Makerfocus 128x32 pixel .91in Wide OLED Soldering Wires to the Display For any of these boards you can buy male header pins (either straight or 90 angle) and solder them to the display to then use jumper wires, or you can solder your wires directly to the holes on the board. Connecting Jumper Wires to the CS Installing the Software (OLED) Changing the I2C Address If you have other I2C devices, like an I2C bus to control turnouts or other accessories, you may need to change the address of your I2C display to avoid a conflict. * Not Finished. Coming soon! *","title":"I2C Displays"},{"location":"hardware/i2c-displays/#i2c-displays","text":"DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display. We currently support 16 column by 2 row (16x2) and 20 column by 4 row (20x4) LCD displays and the .96 and 1.3\" OLED displays. The LCD displays require a \"backpack\" that converts the raw display to I2C. I2C allows us to use just 2 lines (SDA (serial data) and clock (SCL)) to send text to the display. Without this board, we wouldn't have enough pins, especially on an Uno, to use a display. Examples of compatible displays Note You MUST make sure to order TWO (2) parts for your LCD Displays. You need the display AND a backpack based on the PCF7584 controller chip. Some display do come with this already soldered together. Make sure before you buy!","title":"I2C Displays"},{"location":"hardware/i2c-displays/#connecting-an-lcd-display","text":"Here is an example of a 20 x 4 LCD screen. They come in different colors like blue and green. The controller board (backpack) is shown before soldering it to the back of the display. Soldering is very simple since you just match the two boards together and quickly solder the pins. Though there are 16 of them. Figure 1 - 20 x 4 LCD with backpack And here is an example of a 16 x 2 Display with its backpack sitting above it. Remember to either order a display with the backpack already soldered or two order both pieces from your vendor and solder it yourself: Figure 2 - 16 x 2 LCD with backpack","title":"Connecting an LCD Display"},{"location":"hardware/i2c-displays/#soldering-on-the-backpack-if-you-purchased-separate-pieces","text":"And here is a picture of the board after soldering or if you purchase a board already solderd (or \"welded\" as some of the Chinese sites call it) Figure 3 - LCD with backpack soldered to the back","title":"Soldering on the Backpack (if you purchased separate pieces)"},{"location":"hardware/i2c-displays/#connecting-the-jumper-wires","text":"To connect the Display to the CS, you will need 4 male to female jumper wires: Connect a wire from +5V on the Motor Shield or WiFi Board to Vcc on the backpack Connect a wire from Gnd on the CS to Gnd on the backpack Connect SCL on the Arduino (pin x on the Mega, pin x on the Uno) to SCL on the backpack Connect SDA on the Arduino (pin x on the Mega, pin x on the Uno) to SDA on the backpack","title":"Connecting the Jumper Wires"},{"location":"hardware/i2c-displays/#installing-the-software-lcd","text":"There are two steps to install the software: Install the LiquidCrystal I2C library Edit the config.h file and upload the sketch to your CS","title":"Installing the Software (LCD)"},{"location":"hardware/i2c-displays/#install-the-library","text":"To install the library, open the Arduino IDE and do the following: Select Tools -> Manage libraries Wait for the download to finish updating the list of libraries In the \"Filter your search...\" box, type \"liquidcrystal_i2c\" Scroll down the search results until you find the \"LiquidCrystal_I2C by Frank Brabander\" entry. Click on that library to select it Click \"Install\" Wait for the installation to finish. Click \"Close\" Once the library is installed on your computer, you don't have to install it again.","title":"Install the library"},{"location":"hardware/i2c-displays/#upload-the-sketch-to-your-cs","text":"To upload the new sketch on your Command Station Open the Arduino IDE Open the CommandStation-EX project Open the config.h file (If you haven't renambed config.example.h to config.h do this now) Find the line that says: // define LCD_DRIVER for I2C LCD address 0x3f,16 cols, 2 rows #define LCD_DRIVER 0x3F,16,2 make sure to uncomment this line if it has 2 slashes in front of it by removing them. Find the 4 characters that start with 0x and add the address for your I2C backpack after it. We default to 3F, but your display may be 27. The text would read 0x27 if that was the case. In the next field, enter the number of columns in your dispay. The default is 16. If you have a 20 row display, enter that instead. In the last field, enter the number of rows in your display. We default to a 2 line display. If you have a 4 line display, change this to 4. Save the file Make sure to connect the Arduino to your computer with the USB cable and click the upload button to compile and upload the updated Command Station sketch.","title":"Upload the sketch to your CS"},{"location":"hardware/i2c-displays/#connecting-an-oled-display","text":"OLED displays come in more varieties than LCD displays. The library to run them also takes more memory. Therefore, OLED displays won't work with an UNO. You will require a Mega. Here are some examples of OLED displays: Figure 3 - Adafruit .96\" OLED Display Figure 3 - Makerfocus 128x32 pixel .91in Wide OLED","title":"Connecting an OLED display"},{"location":"hardware/i2c-displays/#soldering-wires-to-the-display","text":"For any of these boards you can buy male header pins (either straight or 90 angle) and solder them to the display to then use jumper wires, or you can solder your wires directly to the holes on the board.","title":"Soldering Wires to the Display"},{"location":"hardware/i2c-displays/#connecting-jumper-wires-to-the-cs","text":"","title":"Connecting Jumper Wires to the CS"},{"location":"hardware/i2c-displays/#installing-the-software-oled","text":"","title":"Installing the Software (OLED)"},{"location":"hardware/i2c-displays/#changing-the-i2c-address","text":"If you have other I2C devices, like an I2C bus to control turnouts or other accessories, you may need to change the address of your I2C display to avoid a conflict. * Not Finished. Coming soon! *","title":"Changing the I2C Address"},{"location":"hardware/microcontrollers/","text":"Microcontrollers DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/microcontrollers/#microcontrollers","text":"DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/motor-boards/","text":"Motor boards There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\". Some require a little work, but others are mostly plug and play. Note We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US). Boards currently supported Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards BTS7960 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section. But I saw this board, will it work? This is a checklist for what your motor controller needs to work with DCC++ EX: A dual H-Bridge (one for MAIN and one for PROG) Handle enough current for the layout (most boards support 2 Amps, enough for 3-5 locos) Have working current sense (many do not) Be able to allow our fast switching speeds (some do not) Plug on shield to eliminate wiring (optional feature) Work with little or now modification (Conductor friendly) Arduino Motor Shield R3 Deek-Robot Motor Shield Need a little tinkering (Tinkerer path) The following are not shields, they are discrete boards. You will need to connect them with wires. LMD18200 BTS70960 Need more modification (Engineer path) \"Beeper Board\" - You have to lift two traces and solder 2 resistors and use 2 jumpers. Connecting your motor shield * coming soon *","title":"Motor Boards"},{"location":"hardware/motor-boards/#motor-boards","text":"There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\". Some require a little work, but others are mostly plug and play. Note We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US).","title":"Motor boards"},{"location":"hardware/motor-boards/#boards-currently-supported","text":"Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards BTS7960 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section.","title":"Boards currently supported"},{"location":"hardware/motor-boards/#but-i-saw-this-board-will-it-work","text":"This is a checklist for what your motor controller needs to work with DCC++ EX: A dual H-Bridge (one for MAIN and one for PROG) Handle enough current for the layout (most boards support 2 Amps, enough for 3-5 locos) Have working current sense (many do not) Be able to allow our fast switching speeds (some do not) Plug on shield to eliminate wiring (optional feature)","title":"But I saw this board, will it work?"},{"location":"hardware/motor-boards/#work-with-little-or-now-modification-conductor-friendly","text":"Arduino Motor Shield R3 Deek-Robot Motor Shield","title":"Work with little or now modification (Conductor friendly)"},{"location":"hardware/motor-boards/#need-a-little-tinkering-tinkerer-path","text":"The following are not shields, they are discrete boards. You will need to connect them with wires. LMD18200 BTS70960","title":"Need a little tinkering (Tinkerer path)"},{"location":"hardware/motor-boards/#need-more-modification-engineer-path","text":"\"Beeper Board\" - You have to lift two traces and solder 2 resistors and use 2 jumpers.","title":"Need more modification (Engineer path)"},{"location":"hardware/motor-boards/#connecting-your-motor-shield","text":"* coming soon *","title":"Connecting your motor shield"},{"location":"hardware/power-supplies/","text":"Power Supplies The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor controllers. Do I need two power supplies? Both your microcontroler (the Arduino) and the motor controller need power. While we recommend a 9 Volt, 1 Amp, DC power supply for the microcontroler, there are other ways to power it. The voltage to the motor controller does not change, you need the correct voltage and amperage for your guage and layout. Three ways to power the Arduino Barrel Connector - This is where we can connect our 9V supply. This requires two power supplies, one for the Arduino and a separate one for the motor controller. The power goes through a voltage regulator on the Arduino and converts the 9V to the 5V the board can use. Vcc pin - USB Connector - If you always will have a computer connected to your Command Station (for example when using JMRI), the 5V from your computer can power it. You won't need another power supply. Most USB ports can only supply 500 milliamps, so be careful about adding anything that will draw current from the CS. A motor shield, a wifi shield and a fan that draws 50mA should be fine. Even if you don't have a laptop, you can use a 5V, 1A USB power supply like a phone charger and connect it to the USB port. 5V pin - You can connect a good quality 5V power supply directly to the 5V pin and ground. This bypasses the voltage regulator on the board which means you can use more current. We recommend a 5V, 1A power supply. Since there are many dual-voltage power supplies on the market, you can use one power supply with two outputs. Voltage N and Z scale layouts should run at at about 12V-14V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages at this Trainboard Thread Another good link (along with just about anything written by Mark Gurries, is here: Mark Gurries - Choosing the Right Booster Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system. Amperage You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply. Recommended Power Supplies Wall warts are a good choice for beginners and those not comfortable with mains wiring. You can get a 12V, 3A, relatively small one for around $8 US. You can also find plenty of laptop type \"brick\" power supplies. They come in ranges from 12V to 18V and 3-5 Amps. The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is an inexpensive and solid option. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005 You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS.","title":"Power Supplies"},{"location":"hardware/power-supplies/#power-supplies","text":"The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor controllers.","title":"Power Supplies"},{"location":"hardware/power-supplies/#do-i-need-two-power-supplies","text":"Both your microcontroler (the Arduino) and the motor controller need power. While we recommend a 9 Volt, 1 Amp, DC power supply for the microcontroler, there are other ways to power it. The voltage to the motor controller does not change, you need the correct voltage and amperage for your guage and layout.","title":"Do I need two power supplies?"},{"location":"hardware/power-supplies/#three-ways-to-power-the-arduino","text":"Barrel Connector - This is where we can connect our 9V supply. This requires two power supplies, one for the Arduino and a separate one for the motor controller. The power goes through a voltage regulator on the Arduino and converts the 9V to the 5V the board can use. Vcc pin - USB Connector - If you always will have a computer connected to your Command Station (for example when using JMRI), the 5V from your computer can power it. You won't need another power supply. Most USB ports can only supply 500 milliamps, so be careful about adding anything that will draw current from the CS. A motor shield, a wifi shield and a fan that draws 50mA should be fine. Even if you don't have a laptop, you can use a 5V, 1A USB power supply like a phone charger and connect it to the USB port. 5V pin - You can connect a good quality 5V power supply directly to the 5V pin and ground. This bypasses the voltage regulator on the board which means you can use more current. We recommend a 5V, 1A power supply. Since there are many dual-voltage power supplies on the market, you can use one power supply with two outputs.","title":"Three ways to power the Arduino"},{"location":"hardware/power-supplies/#voltage","text":"N and Z scale layouts should run at at about 12V-14V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages at this Trainboard Thread Another good link (along with just about anything written by Mark Gurries, is here: Mark Gurries - Choosing the Right Booster Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system.","title":"Voltage"},{"location":"hardware/power-supplies/#amperage","text":"You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply.","title":"Amperage"},{"location":"hardware/power-supplies/#recommended-power-supplies","text":"Wall warts are a good choice for beginners and those not comfortable with mains wiring. You can get a 12V, 3A, relatively small one for around $8 US. You can also find plenty of laptop type \"brick\" power supplies. They come in ranges from 12V to 18V and 3-5 Amps. The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is an inexpensive and solid option. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005 You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS.","title":"Recommended Power Supplies"},{"location":"hardware/wifi-boards/","text":"coming soon","title":"Wifi boards"},{"location":"notes/rewrite/","text":"What's New for the DCC++ EX Project Everything you loved is still there First, we want to stress that we didn't break anything! Whether you are using JMRI as a front end to send commands to your track, handle turnouts or read and write CVs, or any using any other software or the serial monitor, the commands are still the same. We have expanded the API (Application Programming Interface) to add new commands and provide new responses, but they won't affect your old control methods. One example of a new command is the one to handle turning power on and off to individual tracks. DCC++ EX is all new! While we made minor changes to the original DCC++ \"Classic\", all new development is going forward with DCC++ EX. At first, we expanded features, added functionality and fixed bugs by working from the existing code base. The first release of DCC++ will be familiar to any of you who played with the code. However, we want to stress that the next release, the one that is in Beta testing now, is a complete re-write from the ground up. What's different? We started with the DCC Signal Generation code, what we call the \"Waveform Generator\". We got together as a team and looked at how we could make it better. It soon became clear that rather than make piecemeal changes, the entire concept of how the signal could be generated and how to use timers and interrupts would need to be re-imagined. Next we focused on packet generation. We looked at the complexities of reading and maintaining code that was using binary math, multiple \"registers\" to hold train data, and doing bit shifting everywhere to build bytes and stuff them into data packets. The new method gets rid of the old registers and simplifies the whole structure for building packets. Things like start and stop bits and preamble bits are static pieces of information. Do being able to just insert them where they need to go saves time and processor bandwidth. We created an internal API for how modules communicated with each other. So the code is more modular and each unit is dedicated to its specific task. We completely re-wrote current sense and ACK detect routines. We created an automation scripting language called TPL (Train Programming Language) We added many functions like individual track power control, user add-on functions, a much simpler Function (F0-28) command, better turnout handling and more. Why did we do this? We needed a platform that would allow us to grow into the future. The first thing we found was that in order to allow easy changes and to be able to adapt to technology we might want to use going forward, the code needed to be more modular. Each unit needed to be a \"black box\" that either did just one task and do it well, or take input and generate output without having to know anything about the module it was communiating with. Therefore, we created an interal API through which the modules could communicate. By simply unplugging one unit and plugging in another we could continue to work using a differnt devices. An example of this is input and output. It doesn't matter whether JMRI is sending commands to DCC++ EX or if it is a wireless Cab Controller. It doesn't matter if the output device is the serial monitor or an I2C display. It doesn't matter if you want to use a serial port or a network device to route data. This makes it very easy to implement new features with new devices. We just have to create a small interface for whatever new device we want to implement. This has the side benefit of allowing the code to be more readable. Next, the Waveform Generator needed 2 timers and interrupts, one for the Main track signal and one for the Programming track. The Uno only has 3 timers. So 2 of them were already tied up for sending the DCC signal. Since the programming track sits idle most of the time, and both signals were always being generated to the input of the motor board, processing power was being wasted that could be put to use for something else. In addition, because of the way the Arduino is designed, we were forced to use jumpers to connect pins on the Arduino to those on the motor board. Our new design eliminates the need for jumpers! The packet generation routine was complex, hard to maintain, and limited us with regard to the hardware we could run on and new features we could implement (like the Railcom cut-out). We replaced the slow DigitalRead() and DigitalWrite() routines with a fast write library. The packet generation is now streamlined, fast (which allows us to be able to use on only 1 timer to create signals for 2 tracks), and much easier to read. The 3 most requested features were: 1. More reliable CV read and writes, 2. Railcom cut-out, 3. Automation. We haven't limited ourselves to just these features, but we put a lot of time into redesigning things to accomodate them. The current detection routines are completely different. One key difference is all current readings are in milliAmps instead of meaningless pin readings. So if you want to set your overload protection to kick in at 3 Amps, you just enter 3000 for 3000 milliAmps instead of looking up a value from a table. We are still testing all the motorboard and Arduino combinations at different voltages to refine our current readings. This is important because we want to have accurate and fast short-circuit detection, and because the reason CV reading was occasionally unreliable in the past was due to not always sensing a current pulse on the track. In addition to more accurately reading current, we had to completely change the way we look for an \"ACK\" (acknowledgement from the train that it received a command). So we now check immedately after we send a command instead of waiting for a dozen or more packets. This means we don't miss an ACK while this is happening and we jump out of sending uneccessary packes as soon as we get one. You will appreciate how much faster we can read CVs now! We not only have created a rail-com cutout within the Command Station, but are looking at actually reading the Railcom data and reporting it. We may require the use of a Mega instead of an Uno for this feature. TPL brings new capability to the world of automation. You don't have to be a programmer to write a script that tells a train to start moving forward at a set speed until some action (like reaching a sensor) occurs. We will be providing a document and tutorial on TPL once Beta testing is complete. This will be an open-ended project since who knows what people will come up with they want to automate. It will be easy to extend the commands to handle whatever your imagination can dream of. The bottom line So while maintaining proper deference to Gregg Bermann's original concept of an inexpensive Command Station based on the Arduino platform, we don't want to do a disservice to DCC++ EX or develpers like Chris Harlow (UkBloke) and David Cutting (David Cutting) who brought a new vision to the project and who used very little of the original code. This is NOT DCC++ v2.0, this is a completely new, yet API and feature compatible Command Station. And just a tease: What Command Station would be complete without a wireless Cab Controller that speaks DCC++? Keep looking at our web page for new announcments. Thanks This is a team effort. There are a dedicated and organize group of about 15-20 core people involved in the project. In addition, there is all of you who contribute with your comments, feature ideas, evangelizing and testing. So we give you our heartfelt thanks. We will see you online! Click here for The DCC++ EX Team Credits Fred Decker October 2020","title":"What's New"},{"location":"notes/rewrite/#whats-new-for-the-dcc-ex-project","text":"","title":"What's New for the DCC++ EX Project"},{"location":"notes/rewrite/#everything-you-loved-is-still-there","text":"First, we want to stress that we didn't break anything! Whether you are using JMRI as a front end to send commands to your track, handle turnouts or read and write CVs, or any using any other software or the serial monitor, the commands are still the same. We have expanded the API (Application Programming Interface) to add new commands and provide new responses, but they won't affect your old control methods. One example of a new command is the one to handle turning power on and off to individual tracks.","title":"Everything you loved is still there"},{"location":"notes/rewrite/#dcc-ex-is-all-new","text":"While we made minor changes to the original DCC++ \"Classic\", all new development is going forward with DCC++ EX. At first, we expanded features, added functionality and fixed bugs by working from the existing code base. The first release of DCC++ will be familiar to any of you who played with the code. However, we want to stress that the next release, the one that is in Beta testing now, is a complete re-write from the ground up.","title":"DCC++ EX is all new!"},{"location":"notes/rewrite/#whats-different","text":"We started with the DCC Signal Generation code, what we call the \"Waveform Generator\". We got together as a team and looked at how we could make it better. It soon became clear that rather than make piecemeal changes, the entire concept of how the signal could be generated and how to use timers and interrupts would need to be re-imagined. Next we focused on packet generation. We looked at the complexities of reading and maintaining code that was using binary math, multiple \"registers\" to hold train data, and doing bit shifting everywhere to build bytes and stuff them into data packets. The new method gets rid of the old registers and simplifies the whole structure for building packets. Things like start and stop bits and preamble bits are static pieces of information. Do being able to just insert them where they need to go saves time and processor bandwidth. We created an internal API for how modules communicated with each other. So the code is more modular and each unit is dedicated to its specific task. We completely re-wrote current sense and ACK detect routines. We created an automation scripting language called TPL (Train Programming Language) We added many functions like individual track power control, user add-on functions, a much simpler Function (F0-28) command, better turnout handling and more.","title":"What's different?"},{"location":"notes/rewrite/#why-did-we-do-this","text":"We needed a platform that would allow us to grow into the future. The first thing we found was that in order to allow easy changes and to be able to adapt to technology we might want to use going forward, the code needed to be more modular. Each unit needed to be a \"black box\" that either did just one task and do it well, or take input and generate output without having to know anything about the module it was communiating with. Therefore, we created an interal API through which the modules could communicate. By simply unplugging one unit and plugging in another we could continue to work using a differnt devices. An example of this is input and output. It doesn't matter whether JMRI is sending commands to DCC++ EX or if it is a wireless Cab Controller. It doesn't matter if the output device is the serial monitor or an I2C display. It doesn't matter if you want to use a serial port or a network device to route data. This makes it very easy to implement new features with new devices. We just have to create a small interface for whatever new device we want to implement. This has the side benefit of allowing the code to be more readable. Next, the Waveform Generator needed 2 timers and interrupts, one for the Main track signal and one for the Programming track. The Uno only has 3 timers. So 2 of them were already tied up for sending the DCC signal. Since the programming track sits idle most of the time, and both signals were always being generated to the input of the motor board, processing power was being wasted that could be put to use for something else. In addition, because of the way the Arduino is designed, we were forced to use jumpers to connect pins on the Arduino to those on the motor board. Our new design eliminates the need for jumpers! The packet generation routine was complex, hard to maintain, and limited us with regard to the hardware we could run on and new features we could implement (like the Railcom cut-out). We replaced the slow DigitalRead() and DigitalWrite() routines with a fast write library. The packet generation is now streamlined, fast (which allows us to be able to use on only 1 timer to create signals for 2 tracks), and much easier to read. The 3 most requested features were: 1. More reliable CV read and writes, 2. Railcom cut-out, 3. Automation. We haven't limited ourselves to just these features, but we put a lot of time into redesigning things to accomodate them. The current detection routines are completely different. One key difference is all current readings are in milliAmps instead of meaningless pin readings. So if you want to set your overload protection to kick in at 3 Amps, you just enter 3000 for 3000 milliAmps instead of looking up a value from a table. We are still testing all the motorboard and Arduino combinations at different voltages to refine our current readings. This is important because we want to have accurate and fast short-circuit detection, and because the reason CV reading was occasionally unreliable in the past was due to not always sensing a current pulse on the track. In addition to more accurately reading current, we had to completely change the way we look for an \"ACK\" (acknowledgement from the train that it received a command). So we now check immedately after we send a command instead of waiting for a dozen or more packets. This means we don't miss an ACK while this is happening and we jump out of sending uneccessary packes as soon as we get one. You will appreciate how much faster we can read CVs now! We not only have created a rail-com cutout within the Command Station, but are looking at actually reading the Railcom data and reporting it. We may require the use of a Mega instead of an Uno for this feature. TPL brings new capability to the world of automation. You don't have to be a programmer to write a script that tells a train to start moving forward at a set speed until some action (like reaching a sensor) occurs. We will be providing a document and tutorial on TPL once Beta testing is complete. This will be an open-ended project since who knows what people will come up with they want to automate. It will be easy to extend the commands to handle whatever your imagination can dream of.","title":"Why did we do this?"},{"location":"notes/rewrite/#the-bottom-line","text":"So while maintaining proper deference to Gregg Bermann's original concept of an inexpensive Command Station based on the Arduino platform, we don't want to do a disservice to DCC++ EX or develpers like Chris Harlow (UkBloke) and David Cutting (David Cutting) who brought a new vision to the project and who used very little of the original code. This is NOT DCC++ v2.0, this is a completely new, yet API and feature compatible Command Station. And just a tease: What Command Station would be complete without a wireless Cab Controller that speaks DCC++? Keep looking at our web page for new announcments.","title":"The bottom line"},{"location":"notes/rewrite/#thanks","text":"This is a team effort. There are a dedicated and organize group of about 15-20 core people involved in the project. In addition, there is all of you who contribute with your comments, feature ideas, evangelizing and testing. So we give you our heartfelt thanks. We will see you online! Click here for The DCC++ EX Team Credits Fred Decker October 2020","title":"Thanks"},{"location":"resources/resources/","text":"Resources Work in progress","title":"Resources"},{"location":"resources/resources/#resources","text":"Work in progress","title":"Resources"},{"location":"start/arduino-ide-setup/","text":"Basic Setup using the Arduino IDE The Arduino IDE is an \"Integrated Development Environment\". Don't let the name scare you away from giving it a try, it is really just a program that lets you open a project, like our DCC++ EX Software files, compile them into instructions the Arduino understands, and uploads them from your computer into the Arduino using a serial cable. It is extremely easy to use. If you are a Tinkerer or an Engineer (See levels/path choice ), You may want to make changes to the code or just learn more about how the Command Station software works. At a minimum, you may need to change options in the config.h file or use the IDE's \"Serial Monitor\" to monitor your CS, get logs if something is not working, or enter commands to test out features. Download and install the Arduino IDE Rather than go into details that are already covered in great detail on the Arduino web page, just follow the instructions in the following link and then return here. Arduino IDE Guide Download the DCC++ EX zip file Use the link to either the zip or tar file at the botom of our Github page here: DCC++ EX Download Page Unzip the file into the Arduino IDE project folder Find the location to where you downloaded the zip file (usually the \"downloads\" folder) on your computer and unzip it to the Arduino projects folder, called the \"sketchbook folder\". Arduino likes to call \"programs\" \"sketches\". The default name of the Sketchbook folder is \u201cArduino\u201d and the default location of the Sketchbook folder is in the \u201cMy Documents\u201d folder (or just \u201cDocuments\u201d for Mac users). Make sure the path is correct. You should now have a <documents/arduino/CommandStation-EX> folder with the entire DCC-EX project inside it. Copy the config.example.h file or rename it DCC-EX provides you with an example configuration file. This file holds settings that you can change for things like your choice of motor controller, Wifi login credentials, etc. Rather than a future update potentially have you lose any changes you make to your configuration, we give this file a different name and leave it up to you to edit if you need to. Therefore, copy this file and name it's clone \"config.h\" or simply rename this file to \"config.h\". Run the Arduino IDE Program Find the Arduino IDE program on your Start Menu/Mac Finder, etc. and open the application. You will see this screen: Figure 1 - Arduino IDE Open the CommandStation-EX Project Choose \"File -> Open\" from the menu to open the file manager. Figure 2 - File Open Menu Then click on the \"CommandStation-EX\" sketch folder to open it. Scroll down to the \"CommandStation-EX.ino\" file (It should have the round, blue Arduino logo on it) and open that file. We also provide example .ino files for those Tinkerers or Engineers who want to use optional features like the \"User Command Override\" feature, high current motor boards, etc. But for now, and for most users, this will be all you need Figure 3 - Find the CommandStation-EX.ino file Install the DIO2.h Library From the \"Tools\" menu, select \"Manage Libraries\". It may take a few seconds for it to load the list of all the libraries. Libraries are shared pieces of code that can be used by sketches to add functionality without someone having to write them from scratch. Type \"DIO2\" into the search box. You should then see a box below with \"DIO2\" by Thierry Paris of Locduino. Click \"Install\" to install this library. After it installs, close the libary manger window and go back to the main window. Figure 3 - Find and install the DIO2.h Library Edit the config.h file (optional) If you are using the standard Arduino Motor Shield and if optionally using one of the supported Wifi boards and want to connect directly to the Command Station in Access Point Mode (AP) from your WiFi controller , there is nothing to do! Just upload the software to the Command Station in the next step. If you are using a different motor shield or motor controller board or if you wish to connect your CS to your home network instead of having a separate access point, click here for more detailed instructions on how to edit your config.h file . If you want to take a look at this file or make a simple change, just open the file and take a look. You should see many files open in tabs at the top of the IDE Window. Find the down facinng triangle near the upper right of the window and click on it to open the entire list of files. Scroll down to near the bottom and click on the \"config.h\" file you renamed in the previous step to open it in the editing window. If you are sure of your changes, make sure to click on \"file -> save\" from the top menu to save them. Select the board type and com port Before you attempt this step, make sure that you have everything connected properly from the assembly page . And a final reminder to make sure you cut the Vin trace on the bottom of the Arduino Motor Shield. Ready? Then proceed. Connect the computer to the Arduino with the USB cable. Note the 5V coming from your computer/raspberry Pi is enough to power the Mega temporarily since it bypasses the regulator that converts your 7-9V power supply down to 5V and goes right to the 5V bus on the board. So don't be alarmed by lights on your Arduino. From the \"tools\" menu select the \"board\" menu, then \"Arduino AVR boards\", and then \"Arduino Mega or Mega 2560\". Figure 4 - Select your board type Then select \"Processor\" and make sure it says \"ATMega2560\" Last, select \"Port\" and find the port on your computer that recognizes the Arduino. If you don't see a port listed there and are using a clone board, you may have to install a driver for a CH340 USB chip that is on these boards. See here Drivers for the CH340 Figure 4 - Select the correct COM Port Upload the software We are finally ready for the last step that will complete your Command Station. Click on the upload button near the top left. If is a circle with a right arrow next to the compile button that looks like a check mark. Figure 3 - Upload the CS Software to the Arduino The IDE will go through a compile process which will build all the files into an application the Arduino can run and upload it. You may see many lines of logging as it finishes its task. When done, it will upload the file to the Arduino which you may see as some lights blinking on the Arduino. Make sure there are no errors in the log window and that it shows \"done uploading\" in the status bar and \"SUCCESS\" and a listing of how much memory is used on the Arduino in the log window. If you see errors, try our troubleshooting steps here or contact us on Discord . Don't unplug the serial cable yet! Plug in your power adapters You should already have the 7-9V adapter plugged into the Arduino and the 13-14V adapter plugged into the motor shield. Now you can plug both of them into the power socket. Nothing should happen. Be sure that nothing bad happens like smoke escaping from your CS. If anything seems wrong, unplug the power adapters immediately. Use the Serial Monitor to do a quick test The Arduino IDE has a built in serial monitor. That means that in addition to uploading updates to your Command Station, we can interact with the Command Station. Select \"Tools -> Serial Monitor\". Or click on the \"serial monitor\" icon near the upper right of the window. Figure 8 - Open the Serial Monitor Make sure the baud rate at the lower right of the window is set to \"115200\". Make sure the dropdown next to that says \"Both NL & CR\". That makes sure you send a new line command and carriage return which the Arduino expects. Figure 9 - Serial Monitor You should see log information immediately display in the window. If you have a Network shield or WiFi shield connected, you will see the CS setup its AP or connect to your network if you gave it your credentials. If you don't have a network, that's fine, the CS will sense that, the network test will fail, but everything else will be working as it should. Type in a command or two There is an entire language that DCC-EX understands. We call this the DCC-EX API for \"Application Programming Language\". If you are interested, the list of all the commands is here in the DCC++ EX Wiki . Let's just try two commands to make sure everything is working. All DCC-EX commands begin with a less than sign and end with a greater than sign. In the command window, type <1> and press the send button. Power should come on to the main track. You should see 2 red leds light on the \"A\" power output. If not, try the troubleshooting steps here Now enter <s> . That is a lowercase \"s\". You should see status information for your command station appear in the log. Turn off the power to the track by sending <0> to the CS. That is a \"zero\". Exit the Arduino IDE software . Run you trains! Making sure power is off to your track, place your DCC enabled loco (not DCC ready! Ready just means it has the plumbing inside the loco to install an optional DCC decoder, but it is NOT yet DCC compatible). Now either download our exWebThrottle found here exWebThrottle and run it in your browser, or run it directly from our web page. Follow the instructions on that page to enable chromium \"experimental features\". The rest of the instructions show you how to use exWebThrottle. You should be able to find the CS by its serial port and enable it, then turn on the track power, then acquire your loco by its ID. After that, you should be able to use the throttle slider and function buttons to operate you locomotive! You can also watch the exWebThrottle Video by clicking the hyperlink in this sentence. NEXT: Test with exWebThrottle exWebThrottle Page link to using WiFi and Engine driver - coming soon link to using JMRI - coming soon","title":"Arduino IDE Setup"},{"location":"start/arduino-ide-setup/#basic-setup-using-the-arduino-ide","text":"The Arduino IDE is an \"Integrated Development Environment\". Don't let the name scare you away from giving it a try, it is really just a program that lets you open a project, like our DCC++ EX Software files, compile them into instructions the Arduino understands, and uploads them from your computer into the Arduino using a serial cable. It is extremely easy to use. If you are a Tinkerer or an Engineer (See levels/path choice ), You may want to make changes to the code or just learn more about how the Command Station software works. At a minimum, you may need to change options in the config.h file or use the IDE's \"Serial Monitor\" to monitor your CS, get logs if something is not working, or enter commands to test out features.","title":"Basic Setup using the Arduino IDE"},{"location":"start/arduino-ide-setup/#download-and-install-the-arduino-ide","text":"Rather than go into details that are already covered in great detail on the Arduino web page, just follow the instructions in the following link and then return here. Arduino IDE Guide","title":"Download and install the Arduino IDE"},{"location":"start/arduino-ide-setup/#download-the-dcc-ex-zip-file","text":"Use the link to either the zip or tar file at the botom of our Github page here: DCC++ EX Download Page","title":"Download the DCC++ EX zip file"},{"location":"start/arduino-ide-setup/#unzip-the-file-into-the-arduino-ide-project-folder","text":"Find the location to where you downloaded the zip file (usually the \"downloads\" folder) on your computer and unzip it to the Arduino projects folder, called the \"sketchbook folder\". Arduino likes to call \"programs\" \"sketches\". The default name of the Sketchbook folder is \u201cArduino\u201d and the default location of the Sketchbook folder is in the \u201cMy Documents\u201d folder (or just \u201cDocuments\u201d for Mac users). Make sure the path is correct. You should now have a <documents/arduino/CommandStation-EX> folder with the entire DCC-EX project inside it.","title":"Unzip the file into the Arduino IDE project folder"},{"location":"start/arduino-ide-setup/#copy-the-configexampleh-file-or-rename-it","text":"DCC-EX provides you with an example configuration file. This file holds settings that you can change for things like your choice of motor controller, Wifi login credentials, etc. Rather than a future update potentially have you lose any changes you make to your configuration, we give this file a different name and leave it up to you to edit if you need to. Therefore, copy this file and name it's clone \"config.h\" or simply rename this file to \"config.h\".","title":"Copy the config.example.h file or rename it"},{"location":"start/arduino-ide-setup/#run-the-arduino-ide-program","text":"Find the Arduino IDE program on your Start Menu/Mac Finder, etc. and open the application. You will see this screen: Figure 1 - Arduino IDE","title":"Run the Arduino IDE Program"},{"location":"start/arduino-ide-setup/#open-the-commandstation-ex-project","text":"Choose \"File -> Open\" from the menu to open the file manager. Figure 2 - File Open Menu Then click on the \"CommandStation-EX\" sketch folder to open it. Scroll down to the \"CommandStation-EX.ino\" file (It should have the round, blue Arduino logo on it) and open that file. We also provide example .ino files for those Tinkerers or Engineers who want to use optional features like the \"User Command Override\" feature, high current motor boards, etc. But for now, and for most users, this will be all you need Figure 3 - Find the CommandStation-EX.ino file","title":"Open the CommandStation-EX Project"},{"location":"start/arduino-ide-setup/#install-the-dio2h-library","text":"From the \"Tools\" menu, select \"Manage Libraries\". It may take a few seconds for it to load the list of all the libraries. Libraries are shared pieces of code that can be used by sketches to add functionality without someone having to write them from scratch. Type \"DIO2\" into the search box. You should then see a box below with \"DIO2\" by Thierry Paris of Locduino. Click \"Install\" to install this library. After it installs, close the libary manger window and go back to the main window. Figure 3 - Find and install the DIO2.h Library","title":"Install the DIO2.h Library"},{"location":"start/arduino-ide-setup/#edit-the-configh-file-optional","text":"If you are using the standard Arduino Motor Shield and if optionally using one of the supported Wifi boards and want to connect directly to the Command Station in Access Point Mode (AP) from your WiFi controller , there is nothing to do! Just upload the software to the Command Station in the next step. If you are using a different motor shield or motor controller board or if you wish to connect your CS to your home network instead of having a separate access point, click here for more detailed instructions on how to edit your config.h file . If you want to take a look at this file or make a simple change, just open the file and take a look. You should see many files open in tabs at the top of the IDE Window. Find the down facinng triangle near the upper right of the window and click on it to open the entire list of files. Scroll down to near the bottom and click on the \"config.h\" file you renamed in the previous step to open it in the editing window. If you are sure of your changes, make sure to click on \"file -> save\" from the top menu to save them.","title":"Edit the config.h file (optional)"},{"location":"start/arduino-ide-setup/#select-the-board-type-and-com-port","text":"Before you attempt this step, make sure that you have everything connected properly from the assembly page . And a final reminder to make sure you cut the Vin trace on the bottom of the Arduino Motor Shield. Ready? Then proceed. Connect the computer to the Arduino with the USB cable. Note the 5V coming from your computer/raspberry Pi is enough to power the Mega temporarily since it bypasses the regulator that converts your 7-9V power supply down to 5V and goes right to the 5V bus on the board. So don't be alarmed by lights on your Arduino. From the \"tools\" menu select the \"board\" menu, then \"Arduino AVR boards\", and then \"Arduino Mega or Mega 2560\". Figure 4 - Select your board type Then select \"Processor\" and make sure it says \"ATMega2560\" Last, select \"Port\" and find the port on your computer that recognizes the Arduino. If you don't see a port listed there and are using a clone board, you may have to install a driver for a CH340 USB chip that is on these boards. See here Drivers for the CH340 Figure 4 - Select the correct COM Port","title":"Select the board type and com port"},{"location":"start/arduino-ide-setup/#upload-the-software","text":"We are finally ready for the last step that will complete your Command Station. Click on the upload button near the top left. If is a circle with a right arrow next to the compile button that looks like a check mark. Figure 3 - Upload the CS Software to the Arduino The IDE will go through a compile process which will build all the files into an application the Arduino can run and upload it. You may see many lines of logging as it finishes its task. When done, it will upload the file to the Arduino which you may see as some lights blinking on the Arduino. Make sure there are no errors in the log window and that it shows \"done uploading\" in the status bar and \"SUCCESS\" and a listing of how much memory is used on the Arduino in the log window. If you see errors, try our troubleshooting steps here or contact us on Discord . Don't unplug the serial cable yet!","title":"Upload the software"},{"location":"start/arduino-ide-setup/#plug-in-your-power-adapters","text":"You should already have the 7-9V adapter plugged into the Arduino and the 13-14V adapter plugged into the motor shield. Now you can plug both of them into the power socket. Nothing should happen. Be sure that nothing bad happens like smoke escaping from your CS. If anything seems wrong, unplug the power adapters immediately.","title":"Plug in your power adapters"},{"location":"start/arduino-ide-setup/#use-the-serial-monitor-to-do-a-quick-test","text":"The Arduino IDE has a built in serial monitor. That means that in addition to uploading updates to your Command Station, we can interact with the Command Station. Select \"Tools -> Serial Monitor\". Or click on the \"serial monitor\" icon near the upper right of the window. Figure 8 - Open the Serial Monitor Make sure the baud rate at the lower right of the window is set to \"115200\". Make sure the dropdown next to that says \"Both NL & CR\". That makes sure you send a new line command and carriage return which the Arduino expects. Figure 9 - Serial Monitor You should see log information immediately display in the window. If you have a Network shield or WiFi shield connected, you will see the CS setup its AP or connect to your network if you gave it your credentials. If you don't have a network, that's fine, the CS will sense that, the network test will fail, but everything else will be working as it should.","title":"Use the Serial Monitor to do a quick test"},{"location":"start/arduino-ide-setup/#type-in-a-command-or-two","text":"There is an entire language that DCC-EX understands. We call this the DCC-EX API for \"Application Programming Language\". If you are interested, the list of all the commands is here in the DCC++ EX Wiki . Let's just try two commands to make sure everything is working. All DCC-EX commands begin with a less than sign and end with a greater than sign. In the command window, type <1> and press the send button. Power should come on to the main track. You should see 2 red leds light on the \"A\" power output. If not, try the troubleshooting steps here Now enter <s> . That is a lowercase \"s\". You should see status information for your command station appear in the log. Turn off the power to the track by sending <0> to the CS. That is a \"zero\". Exit the Arduino IDE software .","title":"Type in a command or two"},{"location":"start/arduino-ide-setup/#run-you-trains","text":"Making sure power is off to your track, place your DCC enabled loco (not DCC ready! Ready just means it has the plumbing inside the loco to install an optional DCC decoder, but it is NOT yet DCC compatible). Now either download our exWebThrottle found here exWebThrottle and run it in your browser, or run it directly from our web page. Follow the instructions on that page to enable chromium \"experimental features\". The rest of the instructions show you how to use exWebThrottle. You should be able to find the CS by its serial port and enable it, then turn on the track power, then acquire your loco by its ID. After that, you should be able to use the throttle slider and function buttons to operate you locomotive! You can also watch the exWebThrottle Video by clicking the hyperlink in this sentence. NEXT: Test with exWebThrottle exWebThrottle Page link to using WiFi and Engine driver - coming soon link to using JMRI - coming soon","title":"Run you trains!"},{"location":"start/assembly/","text":"Assembly Let's start with the basics and add as you see fit. For this install, you need the following: An Arduino Mega or compatible * An Arduino Motor Shield or compatible A USB-A Male to USB-B Male cable, aka USB Printer cable (or Micro USB for some Arduino Mega clones) 18 to 16 AWG twisted pair hookup wire to connect the CS (Motor Controller outputs) to your tracks A 7-9V DC Power supply with a 2.5mm barrel connector for the Mega (see Power Supplies ) for other options. You may be able to eliminate this second power supply) A 12V-15V power supply for the Motor Shield (See fig for proper voltage) A 2.5mm x 5.5mm Female DC Plug to Screw Terminal (if you don't want to strip wires on your power supply) Refer to the Starter Kit for more infomation about this list of what you will need. figure 1 - basic setup * For an Uno, Nano or other microcontroller, please see Using a different microcontroller . If you wish to use a different motor controller (for example to have more current to operate more trains and accessories), see Motor Controllers For a video on how to do this, click here link coming soon 1. BEFORE YOU BEGIN, Cut the Vin trace on the motor controller We recommend you use two separate power supplies (or one power supply that can deliver two different voltages) one for the Arduino Mega and the other for the Motor Controller to power your tracks. You will need to turn the motor controller board upside down and cut the trace indicated in the picture with a razor blade or x-acto knife. 2 or 3 firm scratches through the trace should do it. Do not cut too deep. Both a magifier and an ohmmeter would be helpful here. The little vertical line in between the two solder pads is the scratch mark from where we cut through the little solder trace. Note By default, the motor controller connects its power supply via the pins, to the Arduino. This can supply too much voltage to the Arduino. If you do not cut this trace, you could damage the Arduino if you apply more than 12V to the motor shield. In the same way, if you don't cut this trace and use the 2 power supplies as recommended, they would be connected to each other. This would not be good. figure 2 - Cutting the Vin trace If you have an ohmmeter, touch your probes to each side of the trace pads and make sure the resistance reading is infinite. In other words, make sure the trace is cut and there is no longer continuity between the two pads on the trace. 2. You need to connect the motor shield on top of the Arduino. Note It is very easy to misalign the pins and then either have trouble diagnosing problems or damage the board! Here are some tips: There are power connectors on both boards. They must point in the same direction There are outdented \"tabs\" on the opposite end of the board. They must point in the same direction. The pin numbers on both boards must align (pin 1 goes to pin 1, gnd goes to gnd, etc) With the power connectors to your right, align the pins facing you first (pins 0-12, aref, gnd, etc.) Look at the pins on the motorboard and make sure they are all straight and line up in a neat row Place both boards on the table with the power connector end facing in the same direction Figure 3 - Properly orient the boards a. Did you remember to cut the trace on the motor shield? If not, see above. Otherwise, sight down both rows of pins on the motor board and make sure they are all straight. They should all line up in a row and not be bent in any plane, just like the teeth on a comb. If any look like the photo below, bend them with your fingers and/or needle nose pliers. figure 4 - Bent pins b. Line up the pins on the side of the board closest to the USB with the header connector on the Mega first. You want to line up pins 0-7 on the Mega with the same pins on the motor board. On the other side, IOREF, RESET, 3V3, etc. and A0-A5 need to line up on both boards. See the picture below and notice the small gap between the two sets of pins to match the two pin header sockets. figure 5 - Line up left side first c. Just align them and start to push them in but don't push them all the way. Use your fingers to try to push the pins to get them to all to into the holes. figure 6 - Get all the pins started d. Do the same on the other side. Get all the pins aligned and start to press gently to get them into the holes. Notice on this side, you have more holes than you do pins. This is normal. figure 7 - Start the other side e. Now, being careful to not bend any pins gently press, using a rocking motion if you need to, in order to get the motor board to seat firmly onto the Mega. Press gently until you feel you can't put the pins in any further. Don't force anything. figure 8 - Gently press the boards together f. The boards should be seated. Note the pins are longer than the headers. It is normal for you to see a few millimeters of the pins between the bottom of the motor board and the top of the headers. Figure 9 shows the boards as they look properly seated. figure 9 - The boards when fully seated Check your work. Look under and through where the boards connect, make sure no pins missed the holes and got bent so that they run along the outside of the headers. 3. Connect your power supply to the motor shield (But don't plug it in yet!) WARNING : Make sure you have cut the trace on the motor control board. If not, see above first. Once you know the trace is cut, connect power to the motor board Make sure you have a power supply with the correct voltage and current rating. For help on selecting your power supply, pleas see Power Supplies ) If you are using a \"bench\" or metal box type power supply, simply connect the DC output of the power supply to the DC input of the motor shield. Make sure that the positive screw terminal (+) is connected to the positive terminal (Vin) of the motor shield and the negative terminal (- or gnd) is connected to the negative (gnd) terminal of the motor shield figure 10 - Power in to the Motor Shield If you are using a laptop style \"brick\" power supply or an adapter that plugs into the wall (aka wall wart), use the barrel connector to screw terminal adapter to connect your power supply to the Vin and ground pins on the motor shield. Be careful to use the correct polarity. Make sure the positive terminal on the screw terminal adapter connects to the positive (+) on the motor shield and the negative terminal (- or gnd) connects to the negative terminal. figure 11 - Screw Terminal Adapter to Motor Shield If you don't have a screw terminal adapter, you can cut the end off your power supply and strip the wires. The outer wire braid is usually the negative connection and the center wire is the positive connection. Check the wiring image on the power supply itself. 4. Connect the power wires to the tracks There are two sets of output connectors on the motor shield, \"A\" and \"B\". A is the main or operations (also called \"Ops\") track while B is the programming or service track. Connect twisted pair wire of the proper gauge to each track. Polarity it non important here, but if you will be using a siding track instead of a separate, unused piece of track, make sure that the positive and negative for both tracks match. In other words, if you view one side of your main track as having a \"left\" side and a \"right\" side, and connect positive output A to the left side, connect the positive from the B side to the left side of the programming track. In electrical terms, we want both tracks to be \"in phase\" with each other. Here is the diagram from above repeated again for reference. figure 12 - Out to Main and Program tracks 5. Connect the power supply to the Arduino (but )don't plug it in yet!) Connect the 2.5mm barrel connector from your separate 7-9V DC powersupply to the barrel connector on the Arduino. If you have a power supply with bare wires, you can bypass the barrel connector and connect your power supply to the \"Vin\" and \"Gnd\" pins on the Arduino. Note There are different ways to power your Arduino. You may be able to avoid having a second power supply if you will always have a computer connected to your CS (for example to run exWebThrottle or JMRI. There is also a way to use a 5V power supply. Please read Power Supplies ) to help you find what will work best for you). 6. Install the optional WiFi board You can connect a controller like JMRI or our exWebThrottle by using the serial cable to connect between your computer and the CS. If so, skip to step 7. If you are installing a ESP8266 Shield or bare ESP8266 to connect wirelessly, Click the link below. Wifi Setup 7. Download and install the DCC++ EX Software for your Command Station Keep your USB cable handy because we are going to need it in the next step. Click on one of the links below to see how to install the software. If you are a \"Conductor\" (Click to see user levels / path choice ), we recommend using our installer. It is the simplest and quickest way to get started since it walks you through a simple process by letting you select any options from easy to use selections and then installs everything you need. If you are a \"Tinkerer\" or \"Engineer\", you may prefer using the Arduino IDE. Many of you may have already used the Arduino IDE and are familiar with it. The Arduino IDE is a very simple \"Integrated Development Environment\" that lets you open the DCC-EX project files, edit your config file or even your main program file, upload it to the Arduino, and then monitor or interact with the Command Station for testing. Engineers may also use PlatformIO, this is like the Arduino IDE on steroids and is the development environment we use to develop DCC++ EX You can skip the technical notes if you like and scroll down to the install instruction links. TECHNICAL NOTES Wire Gauge - The Arduino Motor controller can only provide about 1.5 Amps of power (despite being rated for 2), so 18 AWG wire is ample. If you use a different motor controller and deliver more current to your track, you may need thicker wire. Power Supplies - Why do we recommend a 7-9V power supply for the Mega when the manual says it can handle 12V or even 20? Can't you just use one 12V power supply to power both of them? Short answer; NO. You want two supplies (or one supply that splits out 2 voltages). The Arduino Mega only needs around 7V to operate. Any voltage over that is wasted as heat and can burn out the regulator on the board. And most people want a minimum of 12V into the Motor Board, while many want 14 (for N and HO Scale). Where your Mega could run hot for a while with 12V, if 14V from the Motorboard was connected to the Mega, it would destroy it. Cut the trace and use 2 power supplies. Click here for more information about Power Supplies Using a 5V Supply - There is one more option for powering the Mega. If you have a 5V DC regulated power supply, you can bypass the barrel connector and the regulator and connect it direcly to the 5V and Gnd pins on the Arduino. Do NOT connect anything to the barrel connector if you do this! You would still need to cut the Vin trace on the Motor Shield and use your separate power supply that plugs into the shield. Next Page If you are adding a WiFi Shield: Adding a WiFi Shield If you are ready to install the software using the DCC-EX Installer Install using the Automated Installer If you are installing using the Arduino IDE Install using the Arduino IDE","title":"Hardware & Assembly"},{"location":"start/assembly/#assembly","text":"Let's start with the basics and add as you see fit. For this install, you need the following: An Arduino Mega or compatible * An Arduino Motor Shield or compatible A USB-A Male to USB-B Male cable, aka USB Printer cable (or Micro USB for some Arduino Mega clones) 18 to 16 AWG twisted pair hookup wire to connect the CS (Motor Controller outputs) to your tracks A 7-9V DC Power supply with a 2.5mm barrel connector for the Mega (see Power Supplies ) for other options. You may be able to eliminate this second power supply) A 12V-15V power supply for the Motor Shield (See fig for proper voltage) A 2.5mm x 5.5mm Female DC Plug to Screw Terminal (if you don't want to strip wires on your power supply) Refer to the Starter Kit for more infomation about this list of what you will need. figure 1 - basic setup * For an Uno, Nano or other microcontroller, please see Using a different microcontroller . If you wish to use a different motor controller (for example to have more current to operate more trains and accessories), see Motor Controllers For a video on how to do this, click here link coming soon","title":"Assembly"},{"location":"start/assembly/#1-before-you-begin-cut-the-vin-trace-on-the-motor-controller","text":"We recommend you use two separate power supplies (or one power supply that can deliver two different voltages) one for the Arduino Mega and the other for the Motor Controller to power your tracks. You will need to turn the motor controller board upside down and cut the trace indicated in the picture with a razor blade or x-acto knife. 2 or 3 firm scratches through the trace should do it. Do not cut too deep. Both a magifier and an ohmmeter would be helpful here. The little vertical line in between the two solder pads is the scratch mark from where we cut through the little solder trace. Note By default, the motor controller connects its power supply via the pins, to the Arduino. This can supply too much voltage to the Arduino. If you do not cut this trace, you could damage the Arduino if you apply more than 12V to the motor shield. In the same way, if you don't cut this trace and use the 2 power supplies as recommended, they would be connected to each other. This would not be good. figure 2 - Cutting the Vin trace If you have an ohmmeter, touch your probes to each side of the trace pads and make sure the resistance reading is infinite. In other words, make sure the trace is cut and there is no longer continuity between the two pads on the trace.","title":"1. BEFORE YOU BEGIN, Cut the Vin trace on the motor controller"},{"location":"start/assembly/#2-you-need-to-connect-the-motor-shield-on-top-of-the-arduino","text":"Note It is very easy to misalign the pins and then either have trouble diagnosing problems or damage the board! Here are some tips: There are power connectors on both boards. They must point in the same direction There are outdented \"tabs\" on the opposite end of the board. They must point in the same direction. The pin numbers on both boards must align (pin 1 goes to pin 1, gnd goes to gnd, etc) With the power connectors to your right, align the pins facing you first (pins 0-12, aref, gnd, etc.) Look at the pins on the motorboard and make sure they are all straight and line up in a neat row Place both boards on the table with the power connector end facing in the same direction Figure 3 - Properly orient the boards a. Did you remember to cut the trace on the motor shield? If not, see above. Otherwise, sight down both rows of pins on the motor board and make sure they are all straight. They should all line up in a row and not be bent in any plane, just like the teeth on a comb. If any look like the photo below, bend them with your fingers and/or needle nose pliers. figure 4 - Bent pins b. Line up the pins on the side of the board closest to the USB with the header connector on the Mega first. You want to line up pins 0-7 on the Mega with the same pins on the motor board. On the other side, IOREF, RESET, 3V3, etc. and A0-A5 need to line up on both boards. See the picture below and notice the small gap between the two sets of pins to match the two pin header sockets. figure 5 - Line up left side first c. Just align them and start to push them in but don't push them all the way. Use your fingers to try to push the pins to get them to all to into the holes. figure 6 - Get all the pins started d. Do the same on the other side. Get all the pins aligned and start to press gently to get them into the holes. Notice on this side, you have more holes than you do pins. This is normal. figure 7 - Start the other side e. Now, being careful to not bend any pins gently press, using a rocking motion if you need to, in order to get the motor board to seat firmly onto the Mega. Press gently until you feel you can't put the pins in any further. Don't force anything. figure 8 - Gently press the boards together f. The boards should be seated. Note the pins are longer than the headers. It is normal for you to see a few millimeters of the pins between the bottom of the motor board and the top of the headers. Figure 9 shows the boards as they look properly seated. figure 9 - The boards when fully seated Check your work. Look under and through where the boards connect, make sure no pins missed the holes and got bent so that they run along the outside of the headers.","title":"2. You need to connect the motor shield on top of the Arduino."},{"location":"start/assembly/#3-connect-your-power-supply-to-the-motor-shield-but-dont-plug-it-in-yet","text":"WARNING : Make sure you have cut the trace on the motor control board. If not, see above first. Once you know the trace is cut, connect power to the motor board Make sure you have a power supply with the correct voltage and current rating. For help on selecting your power supply, pleas see Power Supplies ) If you are using a \"bench\" or metal box type power supply, simply connect the DC output of the power supply to the DC input of the motor shield. Make sure that the positive screw terminal (+) is connected to the positive terminal (Vin) of the motor shield and the negative terminal (- or gnd) is connected to the negative (gnd) terminal of the motor shield figure 10 - Power in to the Motor Shield If you are using a laptop style \"brick\" power supply or an adapter that plugs into the wall (aka wall wart), use the barrel connector to screw terminal adapter to connect your power supply to the Vin and ground pins on the motor shield. Be careful to use the correct polarity. Make sure the positive terminal on the screw terminal adapter connects to the positive (+) on the motor shield and the negative terminal (- or gnd) connects to the negative terminal. figure 11 - Screw Terminal Adapter to Motor Shield If you don't have a screw terminal adapter, you can cut the end off your power supply and strip the wires. The outer wire braid is usually the negative connection and the center wire is the positive connection. Check the wiring image on the power supply itself.","title":"3. Connect your power supply to the motor shield (But don't plug it in yet!)"},{"location":"start/assembly/#4-connect-the-power-wires-to-the-tracks","text":"There are two sets of output connectors on the motor shield, \"A\" and \"B\". A is the main or operations (also called \"Ops\") track while B is the programming or service track. Connect twisted pair wire of the proper gauge to each track. Polarity it non important here, but if you will be using a siding track instead of a separate, unused piece of track, make sure that the positive and negative for both tracks match. In other words, if you view one side of your main track as having a \"left\" side and a \"right\" side, and connect positive output A to the left side, connect the positive from the B side to the left side of the programming track. In electrical terms, we want both tracks to be \"in phase\" with each other. Here is the diagram from above repeated again for reference. figure 12 - Out to Main and Program tracks","title":"4. Connect the power wires to the tracks"},{"location":"start/assembly/#5-connect-the-power-supply-to-the-arduino-but-dont-plug-it-in-yet","text":"Connect the 2.5mm barrel connector from your separate 7-9V DC powersupply to the barrel connector on the Arduino. If you have a power supply with bare wires, you can bypass the barrel connector and connect your power supply to the \"Vin\" and \"Gnd\" pins on the Arduino. Note There are different ways to power your Arduino. You may be able to avoid having a second power supply if you will always have a computer connected to your CS (for example to run exWebThrottle or JMRI. There is also a way to use a 5V power supply. Please read Power Supplies ) to help you find what will work best for you).","title":"5. Connect the power supply to the Arduino (but )don't plug it in yet!)"},{"location":"start/assembly/#6-install-the-optional-wifi-board","text":"You can connect a controller like JMRI or our exWebThrottle by using the serial cable to connect between your computer and the CS. If so, skip to step 7. If you are installing a ESP8266 Shield or bare ESP8266 to connect wirelessly, Click the link below. Wifi Setup","title":"6. Install the optional WiFi board"},{"location":"start/assembly/#7-download-and-install-the-dcc-ex-software-for-your-command-station","text":"Keep your USB cable handy because we are going to need it in the next step. Click on one of the links below to see how to install the software. If you are a \"Conductor\" (Click to see user levels / path choice ), we recommend using our installer. It is the simplest and quickest way to get started since it walks you through a simple process by letting you select any options from easy to use selections and then installs everything you need. If you are a \"Tinkerer\" or \"Engineer\", you may prefer using the Arduino IDE. Many of you may have already used the Arduino IDE and are familiar with it. The Arduino IDE is a very simple \"Integrated Development Environment\" that lets you open the DCC-EX project files, edit your config file or even your main program file, upload it to the Arduino, and then monitor or interact with the Command Station for testing. Engineers may also use PlatformIO, this is like the Arduino IDE on steroids and is the development environment we use to develop DCC++ EX You can skip the technical notes if you like and scroll down to the install instruction links.","title":"7. Download and install the DCC++ EX Software for your Command Station"},{"location":"start/assembly/#technical-notes","text":"Wire Gauge - The Arduino Motor controller can only provide about 1.5 Amps of power (despite being rated for 2), so 18 AWG wire is ample. If you use a different motor controller and deliver more current to your track, you may need thicker wire. Power Supplies - Why do we recommend a 7-9V power supply for the Mega when the manual says it can handle 12V or even 20? Can't you just use one 12V power supply to power both of them? Short answer; NO. You want two supplies (or one supply that splits out 2 voltages). The Arduino Mega only needs around 7V to operate. Any voltage over that is wasted as heat and can burn out the regulator on the board. And most people want a minimum of 12V into the Motor Board, while many want 14 (for N and HO Scale). Where your Mega could run hot for a while with 12V, if 14V from the Motorboard was connected to the Mega, it would destroy it. Cut the trace and use 2 power supplies. Click here for more information about Power Supplies Using a 5V Supply - There is one more option for powering the Mega. If you have a 5V DC regulated power supply, you can bypass the barrel connector and the regulator and connect it direcly to the 5V and Gnd pins on the Arduino. Do NOT connect anything to the barrel connector if you do this! You would still need to cut the Vin trace on the Motor Shield and use your separate power supply that plugs into the shield. Next Page If you are adding a WiFi Shield: Adding a WiFi Shield If you are ready to install the software using the DCC-EX Installer Install using the Automated Installer If you are installing using the Arduino IDE Install using the Arduino IDE","title":"TECHNICAL NOTES"},{"location":"start/automation/","text":"Automation Work in progress","title":"Automation"},{"location":"start/automation/#automation","text":"Work in progress","title":"Automation"},{"location":"start/dccpp-jmri/","text":"DCC++ and JMRI Setup Work in progress","title":"JMRI Setup"},{"location":"start/dccpp-jmri/#dcc-and-jmri-setup","text":"Work in progress","title":"DCC++ and JMRI Setup"},{"location":"start/diy-starter-kit/","text":"DCC++ EX Starter Kit This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Command Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed. This is often abbreviated to just \"CS\" Note Keep in mind that if you just want to run trains and start without the separate Raspberry Pi and JMRI, you can purchase just the Arduino Mega and Motorshield combination and use exWebThrottle. Suppliers list coming soon What You Will Need A \"main\" track aka \"operations\" track - most people already have this, it's your layout A \"programming\" track aka \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment that use \"accessory decoders\". This can be an electrically isolated siding if you like and DCC++ EX will allow that to be part of your main track when not programming locos A known-good locomotive equipped with a DCC decoder. You may want this to have sound capability Equipment List: Hardware A compatible Arduino Board Arduino Mega (clones work too) Arduino UNO R3 (clones work too) Arduino Nano (Tinkerers and Engineers) A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Deek-Robot L298 Motor Shield Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503)(Tinkerers/Engineers) Other boards listed in the hardware section (Engineers) DC Power Supply for the motor shield DC Power Supply for the Mega You CAN have one power supply, please see more detail at Power Supplies USB A to B Cable (aka USB Printer Cable) to connect your Pi or computer to the Arduino A MicroSD Card (for the Raspberry Pi if you choose to use one) Computer to upload software to the Arduino Command Station and optionally operate as a controller (see note below) We recommend: Elegoo Mega 2560 Deek-Robot Motor Shield 12V 5Amp Power Supply for the Track (connects to the motor shield) 9V 1Amp Power Supply for the Arduino There is a way to use your computer connection, a USB charger, or a separate 5V power supply also, please see Power Supplies for options Raspberry Pi 4B Note You may use your own computer instead of the Raspberry Pi. However, the image software below saves you installing software on your computer and does a lot more. See: \"My Computer vs. Raspberry Pi\" You can check Amazon, Ebay, AliExpress, Banggood, Adafruit, Sparkfun and others for all the above Software DCC++ EX Installer Steve Todd's Raspberry Pi Image (If you wannt to use a Pi) JMRI (If you want to use a laptop or desktop) Arduino Software IDE to edit and upload changes (Optional) exWebThrottle Controller Note As mentioned above you can also use your existing computer (PC, Mac, Linux) instead of a Pi. You need a computer or Pi to run our exWebThrottle or JMRI and also to connect to the Arduino to run your trains (the exception to this is by using the WiFi Option ). A laptop or similar is needed in any case because you are going to need one to download the installer and the Raspebrry Pi image. You will then use it to run the installer to upload the program into the Arduino and copy the Raspberry Pi image you download to the MicroSD Card that goes in the Pi. NOTE: Optionally, you may just use the computer to download and burn the SDCard and then use the Pi to install the firmware onto the Arduino using our Installer. And lastly, you could install a WiFi Shield and use your mobile device as a controller using an app like Engine Driver. Using an Uno While we recommend an Mega, you can use an Uno. However, due to memory and other limitations on an Uno, you will have limitations regarding the options you can choose. For example, you can't have Ethernet with an Uno. For a more detailed comparison of features and what you can and can't do with an Uno, please see Microcontroller: Which one do I need? Recap This can be a little confusing, so let explain it a different way: You will need to build a command station with An Arduino and a Motor Controller and, optionally, an ESP8266 WiFi shield You will need a power supply connected to the motor shield to power your track and will need a separate source of power for the Arduino (or perhaps not, keep reading) You will need a computer and a USB cable to download software and then upload it to the Arduino. You may also want to download an SDCard image to use a Raspberry Pi instead of a computer to upload your Command Station software and run a controller. You will need a controller that sends commands to the CS and controls your trains. That controller can be any one of the following: A computer capable of running a Chromium based browser to use our exWebThrottle to connect to the CS via a USB cable. This computer does not need to be connected to the internet once you download the exWebThrottle files to your computer. A computer running JMRI. JMRI connects via the USB cable to the CS and you control your trains with the Throttles built into JMRI. You can also use the WiThrottle server built into JMRI to connect any WiThrottle compatible controller (such as the Engine Driver mobile app) via WiFi to JMRI and control your layout that way. A Raspberry Pi as a computer. You can do any of the things mentioned in 1 and 2 above. With Steve Todd's image burned to an SDCard and installed in the Rasperry Pi, JMRI, the WiThrottle Server with networking, and more is installed and running when you boot. You still need a USB cable to connect the Pi to the CS. If you install an ESP8266 WiFi Shield, you don't need a computer or a Pi if you don't want it once you upload the software to the Arduino. You can connect directly to the CS via WiFi using any WiThrottle compatible controller such as Engine Driver running on a WiFi device like your mobile phone. Note The computer USB port in option 1, 2, or 3 may be able to be the power supply for the Arduino (but you will still need a 12-14V DC power supply for the motor shield) See Power Supplies ) for information on how to choose the right power supplies and different ways you can power the Arduino. Next Page: Assembly","title":"Starter Kit"},{"location":"start/diy-starter-kit/#dcc-ex-starter-kit","text":"This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Command Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed. This is often abbreviated to just \"CS\" Note Keep in mind that if you just want to run trains and start without the separate Raspberry Pi and JMRI, you can purchase just the Arduino Mega and Motorshield combination and use exWebThrottle. Suppliers list coming soon","title":"DCC++ EX Starter Kit"},{"location":"start/diy-starter-kit/#what-you-will-need","text":"A \"main\" track aka \"operations\" track - most people already have this, it's your layout A \"programming\" track aka \"service\" track - a short section of track that you will use to program locomotives and other pieces of equipment that use \"accessory decoders\". This can be an electrically isolated siding if you like and DCC++ EX will allow that to be part of your main track when not programming locos A known-good locomotive equipped with a DCC decoder. You may want this to have sound capability","title":"What You Will Need"},{"location":"start/diy-starter-kit/#equipment-list","text":"","title":"Equipment List:"},{"location":"start/diy-starter-kit/#hardware","text":"A compatible Arduino Board Arduino Mega (clones work too) Arduino UNO R3 (clones work too) Arduino Nano (Tinkerers and Engineers) A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Deek-Robot L298 Motor Shield Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503)(Tinkerers/Engineers) Other boards listed in the hardware section (Engineers) DC Power Supply for the motor shield DC Power Supply for the Mega You CAN have one power supply, please see more detail at Power Supplies USB A to B Cable (aka USB Printer Cable) to connect your Pi or computer to the Arduino A MicroSD Card (for the Raspberry Pi if you choose to use one) Computer to upload software to the Arduino Command Station and optionally operate as a controller (see note below) We recommend: Elegoo Mega 2560 Deek-Robot Motor Shield 12V 5Amp Power Supply for the Track (connects to the motor shield) 9V 1Amp Power Supply for the Arduino There is a way to use your computer connection, a USB charger, or a separate 5V power supply also, please see Power Supplies for options Raspberry Pi 4B Note You may use your own computer instead of the Raspberry Pi. However, the image software below saves you installing software on your computer and does a lot more. See: \"My Computer vs. Raspberry Pi\" You can check Amazon, Ebay, AliExpress, Banggood, Adafruit, Sparkfun and others for all the above","title":"Hardware"},{"location":"start/diy-starter-kit/#software","text":"DCC++ EX Installer Steve Todd's Raspberry Pi Image (If you wannt to use a Pi) JMRI (If you want to use a laptop or desktop) Arduino Software IDE to edit and upload changes (Optional) exWebThrottle Controller Note As mentioned above you can also use your existing computer (PC, Mac, Linux) instead of a Pi. You need a computer or Pi to run our exWebThrottle or JMRI and also to connect to the Arduino to run your trains (the exception to this is by using the WiFi Option ). A laptop or similar is needed in any case because you are going to need one to download the installer and the Raspebrry Pi image. You will then use it to run the installer to upload the program into the Arduino and copy the Raspberry Pi image you download to the MicroSD Card that goes in the Pi. NOTE: Optionally, you may just use the computer to download and burn the SDCard and then use the Pi to install the firmware onto the Arduino using our Installer. And lastly, you could install a WiFi Shield and use your mobile device as a controller using an app like Engine Driver.","title":"Software"},{"location":"start/diy-starter-kit/#using-an-uno","text":"While we recommend an Mega, you can use an Uno. However, due to memory and other limitations on an Uno, you will have limitations regarding the options you can choose. For example, you can't have Ethernet with an Uno. For a more detailed comparison of features and what you can and can't do with an Uno, please see Microcontroller: Which one do I need?","title":"Using an Uno"},{"location":"start/diy-starter-kit/#recap","text":"This can be a little confusing, so let explain it a different way: You will need to build a command station with An Arduino and a Motor Controller and, optionally, an ESP8266 WiFi shield You will need a power supply connected to the motor shield to power your track and will need a separate source of power for the Arduino (or perhaps not, keep reading) You will need a computer and a USB cable to download software and then upload it to the Arduino. You may also want to download an SDCard image to use a Raspberry Pi instead of a computer to upload your Command Station software and run a controller. You will need a controller that sends commands to the CS and controls your trains. That controller can be any one of the following: A computer capable of running a Chromium based browser to use our exWebThrottle to connect to the CS via a USB cable. This computer does not need to be connected to the internet once you download the exWebThrottle files to your computer. A computer running JMRI. JMRI connects via the USB cable to the CS and you control your trains with the Throttles built into JMRI. You can also use the WiThrottle server built into JMRI to connect any WiThrottle compatible controller (such as the Engine Driver mobile app) via WiFi to JMRI and control your layout that way. A Raspberry Pi as a computer. You can do any of the things mentioned in 1 and 2 above. With Steve Todd's image burned to an SDCard and installed in the Rasperry Pi, JMRI, the WiThrottle Server with networking, and more is installed and running when you boot. You still need a USB cable to connect the Pi to the CS. If you install an ESP8266 WiFi Shield, you don't need a computer or a Pi if you don't want it once you upload the software to the Arduino. You can connect directly to the CS via WiFi using any WiThrottle compatible controller such as Engine Driver running on a WiFi device like your mobile phone. Note The computer USB port in option 1, 2, or 3 may be able to be the power supply for the Arduino (but you will still need a 12-14V DC power supply for the motor shield) See Power Supplies ) for information on how to choose the right power supplies and different ways you can power the Arduino. Next Page: Assembly","title":"Recap"},{"location":"start/firebox/","text":"","title":"Firebox"},{"location":"start/installer-setup/","text":"Installer Setup Requirements Windows/Linux/MacOS Computer DCC-EX Compatible motor shield / motor controller board DCC-EX Compatible Microcontroller such as Arduino Mega/Uno or SparkFun SAM21 Development board USB cable to connect your computer to the Microcontroller Trains Note For all versions make sure your USB Cable is conncted from your computer to the Command Station (CS). Make sure no other programs are using the computer's serial port To run on Windows Download files depends on your system Windows 64bit Installer Windows 32bit Installer Extract the Installer into its own folder Open the folder and run the BaseStationInstaller.exe To run on MacOSX Download MacOSX Installer MacOSX Installer Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller To run on Linux (including the Raspberry Pi) Download Linux Installer Linux Installer Download and Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller The Installer Window Figure 1 - Installer Window There will be a lot of information appearing in the log window which can help us debug things if anything goes wrong. The installer needs to connect online to download the latest packages to support your hardware. It will take a few seconds to complete, this is normal. If you have a very slow internet connection it will take longer. Choose your options In the left side options pane use the dropdown selector boxes choose the following options: Figure 2 - Options Pane Select your Commmand Station Type (CommandStation EX or BaseStation Classic) Select your Arduino Board Type (this should be a Mega 2560) Select your Motor Shield (usually Arduino Motor Shield) Select your com port (The installer should find it for you) Check the checkbox for your networking method if you have a Network shield or Wifi Shield installed (check WiFi or Ethernet) Check the checkbox for your display type if using an LCD or OLED display check the Free Mem warning if you need to diagnose memory issues Press the \"Compile and Upload\" button WiFi Checkbox If you have installed a WiFi board, DCC++ EX will scan all the serial ports on your Mega and find it. If you wish to use Access Point Mode (aka AP Mode), there is nothing to do, DO NOT CHECK THIS BOX. AP mode sets up the CS to be its own network router. To use it, you connect your phone or other WiFi device to this network instead of your home network. You will see a new network when you use the connect option on your phone that looks like \"DCC-EX-xxxxxx\" where the \"xxxxxx\" are the last 6 characters of the MAC address of your WiFi board. Simply connect to that network and you have a direct connection to your CS. If you wish to connect to your home network instead (connect to your router using \"Station Mode\"), then check this box. You will then need to enter your credentials to login to your network just like you would from any of your other WiFi devices: Figure 3 - Wifi Options WiFi SSID - The name of your home network WiFi Password - The password required to connect to your home network Host Name - If your WiFi Board supports it, this name can be used in addition to the IP address. Server Port - This is the communication port our internal WiThrottle server uses to communicate with devices like Engine Driver. We recommend leaving it set to 2560 because JMRI also uses that port should you ever want to use JMRI IP Address - Normally, the DHCP server for your network will assign and IP address and you should leave this blank. But if you want to assign an IP address so the CS always uses the same one, you can enter it here. Ethernet Checkbox If you have an Ethernet shield and check this box, you will see options to be able to change the following options: Figure 4 - Ethernet Options Host Name - If your WiFi Board supports it, this name can be used in addition to the IP address. Server Port - This is the communication port our internal WiThrottle server uses to communicate with devices like Engine Driver. We recommend leaving it set to 2560 because JMRI also uses that port should you ever want to use JMRI MAC Address - This is the unique identifier for your Ethernet Shield. We recommend leaving this setting as is. If you ever have more than one Ethernet shield on your network and there is a conflict, you can change this setting. IP Address - Normally, the DHCP server for your network will assign and IP address and you should leave this blank. But if you want to assign an IP address so the CS always uses the same one, you can enter it here. LCD Checkbox If you have a 2 or 4 line LCD diplay connected and check this box, you will see the following options you can edit for your display: Figure 5 - LCD Options LCD Address (in Decimal format) - This is the address of your display, it us usually 39 (for 0x27)or 63 (for 0x3F) LCD Columns - The number over vertical columns on your display LCD Rows - The number of horizontal rows or lines on your display For more information about using displays, click I2C Displays OLED CheckBox If you have an OLED display connected and check this box, you will see the following options you can edit for your display: Figure 6 - OLED Options OLED Width (in pixels) - Enter the width or number of horizontal pixels on your display OLED Heigh (in pixels) - Enter the heighr or number of vertical pixels on your display For more information about using displays, click I2C Displays Refresh Ports Button This button allows you to refresh the serial ports in case you didn't have the Arduino connected when you opened the program or if you will be programming multiple Arduinos. When you plug in a new board, refresh the ports so it can find your device. Compile and Upload Button Once you have configured your options, press this button to compile all the source code and upload it to your Command Station. Test your setup Using the Arduino IDE Serial Monitor To test with the Arduino Serial Monitor, download the Aduino IDE from the following link and install it on your computer. Download the Arduino IDE To do a quick test, open the Arduino application: Figure 7 - The Arduino IDE Select \"Tools -> Serial Monitor\" from the Arduino IDE menu Figure 8 - Open the Serial Monitor from the Tools Menu You will see the following screen: Figure 9 - Serial Monitor Select \"115200\" as the baud rate in the dropdown in the lower right Select \"Both NL & CR\" from the dropdown next to the baud rate The last option makes sure that a new line characters and a carriage return is sent with every command. This is important or the CS will not accept commands because it won't recognize when entering the command is finished. When you open the serial monitor you will see at least one line sent out as status information. If you have a WiFi board or Ethernet Shield you will see a page full of log information as it configures and connects to your network. At the top of the serial monitr type <s> (lowercase \"s\" surrounded by the \"less than\" and \"greater than\" signs) into the command textbox and press \"Send\". You should see: <iDCC-EX V-0.2.1 / MEGA / STANDARD_MOTOR_SHIELD G-9db6d36> This is the \"status\" command and reports your version, types of boards you are using and a build number that lets us know exactly which version of the software you are using down to the day and time we created it. This can help us in debugging There are a lot of other commands you can enter here. As a matter of fact, you could use the serial monitor to test any of the DCC-EX API (application programming interface) commands. You could even program your loco. Please see the DCC++ EX Wiki or the DCC++ Commands page for a list of commands Using exWebthrottle Figure 10 - exWebThrottle Click this link: exWebThrottle to go to the exWebThrottle web page where you have a choice to either run the throttle immediatly from our server or download a zip file that you can unzip and run in a browser from your local machine. This is the fastest way to get started. Using Engine Driver (or other WiThrottle CAB) - Requires WiFi Figure 11 - Engine Driver You will need to install Engine Driver on your mobile device and then connect to the CS either directly with AP mode or through your router with Station Mode. You can then use your phone to control your trains. Click here for instructions on using Engine Driver","title":"Installer Setup"},{"location":"start/installer-setup/#installer-setup","text":"","title":"Installer Setup"},{"location":"start/installer-setup/#requirements","text":"Windows/Linux/MacOS Computer DCC-EX Compatible motor shield / motor controller board DCC-EX Compatible Microcontroller such as Arduino Mega/Uno or SparkFun SAM21 Development board USB cable to connect your computer to the Microcontroller Trains Note For all versions make sure your USB Cable is conncted from your computer to the Command Station (CS). Make sure no other programs are using the computer's serial port","title":"Requirements"},{"location":"start/installer-setup/#to-run-on-windows","text":"Download files depends on your system Windows 64bit Installer Windows 32bit Installer Extract the Installer into its own folder Open the folder and run the BaseStationInstaller.exe","title":"To run on Windows"},{"location":"start/installer-setup/#to-run-on-macosx","text":"Download MacOSX Installer MacOSX Installer Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller","title":"To run on MacOSX"},{"location":"start/installer-setup/#to-run-on-linux-including-the-raspberry-pi","text":"Download Linux Installer Linux Installer Download and Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller","title":"To run on Linux (including the Raspberry Pi)"},{"location":"start/installer-setup/#the-installer-window","text":"Figure 1 - Installer Window There will be a lot of information appearing in the log window which can help us debug things if anything goes wrong. The installer needs to connect online to download the latest packages to support your hardware. It will take a few seconds to complete, this is normal. If you have a very slow internet connection it will take longer.","title":"The Installer Window"},{"location":"start/installer-setup/#choose-your-options","text":"In the left side options pane use the dropdown selector boxes choose the following options: Figure 2 - Options Pane Select your Commmand Station Type (CommandStation EX or BaseStation Classic) Select your Arduino Board Type (this should be a Mega 2560) Select your Motor Shield (usually Arduino Motor Shield) Select your com port (The installer should find it for you) Check the checkbox for your networking method if you have a Network shield or Wifi Shield installed (check WiFi or Ethernet) Check the checkbox for your display type if using an LCD or OLED display check the Free Mem warning if you need to diagnose memory issues Press the \"Compile and Upload\" button","title":"Choose your options"},{"location":"start/installer-setup/#wifi-checkbox","text":"If you have installed a WiFi board, DCC++ EX will scan all the serial ports on your Mega and find it. If you wish to use Access Point Mode (aka AP Mode), there is nothing to do, DO NOT CHECK THIS BOX. AP mode sets up the CS to be its own network router. To use it, you connect your phone or other WiFi device to this network instead of your home network. You will see a new network when you use the connect option on your phone that looks like \"DCC-EX-xxxxxx\" where the \"xxxxxx\" are the last 6 characters of the MAC address of your WiFi board. Simply connect to that network and you have a direct connection to your CS. If you wish to connect to your home network instead (connect to your router using \"Station Mode\"), then check this box. You will then need to enter your credentials to login to your network just like you would from any of your other WiFi devices: Figure 3 - Wifi Options WiFi SSID - The name of your home network WiFi Password - The password required to connect to your home network Host Name - If your WiFi Board supports it, this name can be used in addition to the IP address. Server Port - This is the communication port our internal WiThrottle server uses to communicate with devices like Engine Driver. We recommend leaving it set to 2560 because JMRI also uses that port should you ever want to use JMRI IP Address - Normally, the DHCP server for your network will assign and IP address and you should leave this blank. But if you want to assign an IP address so the CS always uses the same one, you can enter it here.","title":"WiFi Checkbox"},{"location":"start/installer-setup/#ethernet-checkbox","text":"If you have an Ethernet shield and check this box, you will see options to be able to change the following options: Figure 4 - Ethernet Options Host Name - If your WiFi Board supports it, this name can be used in addition to the IP address. Server Port - This is the communication port our internal WiThrottle server uses to communicate with devices like Engine Driver. We recommend leaving it set to 2560 because JMRI also uses that port should you ever want to use JMRI MAC Address - This is the unique identifier for your Ethernet Shield. We recommend leaving this setting as is. If you ever have more than one Ethernet shield on your network and there is a conflict, you can change this setting. IP Address - Normally, the DHCP server for your network will assign and IP address and you should leave this blank. But if you want to assign an IP address so the CS always uses the same one, you can enter it here.","title":"Ethernet Checkbox"},{"location":"start/installer-setup/#lcd-checkbox","text":"If you have a 2 or 4 line LCD diplay connected and check this box, you will see the following options you can edit for your display: Figure 5 - LCD Options LCD Address (in Decimal format) - This is the address of your display, it us usually 39 (for 0x27)or 63 (for 0x3F) LCD Columns - The number over vertical columns on your display LCD Rows - The number of horizontal rows or lines on your display For more information about using displays, click I2C Displays","title":"LCD Checkbox"},{"location":"start/installer-setup/#oled-checkbox","text":"If you have an OLED display connected and check this box, you will see the following options you can edit for your display: Figure 6 - OLED Options OLED Width (in pixels) - Enter the width or number of horizontal pixels on your display OLED Heigh (in pixels) - Enter the heighr or number of vertical pixels on your display For more information about using displays, click I2C Displays","title":"OLED CheckBox"},{"location":"start/installer-setup/#refresh-ports-button","text":"This button allows you to refresh the serial ports in case you didn't have the Arduino connected when you opened the program or if you will be programming multiple Arduinos. When you plug in a new board, refresh the ports so it can find your device.","title":"Refresh Ports Button"},{"location":"start/installer-setup/#compile-and-upload-button","text":"Once you have configured your options, press this button to compile all the source code and upload it to your Command Station.","title":"Compile and Upload Button"},{"location":"start/installer-setup/#test-your-setup","text":"","title":"Test your setup"},{"location":"start/installer-setup/#using-the-arduino-ide-serial-monitor","text":"To test with the Arduino Serial Monitor, download the Aduino IDE from the following link and install it on your computer. Download the Arduino IDE To do a quick test, open the Arduino application: Figure 7 - The Arduino IDE Select \"Tools -> Serial Monitor\" from the Arduino IDE menu Figure 8 - Open the Serial Monitor from the Tools Menu You will see the following screen: Figure 9 - Serial Monitor Select \"115200\" as the baud rate in the dropdown in the lower right Select \"Both NL & CR\" from the dropdown next to the baud rate The last option makes sure that a new line characters and a carriage return is sent with every command. This is important or the CS will not accept commands because it won't recognize when entering the command is finished. When you open the serial monitor you will see at least one line sent out as status information. If you have a WiFi board or Ethernet Shield you will see a page full of log information as it configures and connects to your network. At the top of the serial monitr type <s> (lowercase \"s\" surrounded by the \"less than\" and \"greater than\" signs) into the command textbox and press \"Send\". You should see: <iDCC-EX V-0.2.1 / MEGA / STANDARD_MOTOR_SHIELD G-9db6d36> This is the \"status\" command and reports your version, types of boards you are using and a build number that lets us know exactly which version of the software you are using down to the day and time we created it. This can help us in debugging There are a lot of other commands you can enter here. As a matter of fact, you could use the serial monitor to test any of the DCC-EX API (application programming interface) commands. You could even program your loco. Please see the DCC++ EX Wiki or the DCC++ Commands page for a list of commands","title":"Using the Arduino IDE Serial Monitor"},{"location":"start/installer-setup/#using-exwebthrottle","text":"Figure 10 - exWebThrottle Click this link: exWebThrottle to go to the exWebThrottle web page where you have a choice to either run the throttle immediatly from our server or download a zip file that you can unzip and run in a browser from your local machine. This is the fastest way to get started.","title":"Using exWebthrottle"},{"location":"start/installer-setup/#using-engine-driver-or-other-withrottle-cab-requires-wifi","text":"Figure 11 - Engine Driver You will need to install Engine Driver on your mobile device and then connect to the CS either directly with AP mode or through your router with Station Mode. You can then use your phone to control your trains. Click here for instructions on using Engine Driver","title":"Using Engine Driver (or other WiThrottle CAB) - Requires WiFi"},{"location":"start/levels/","text":"Choose Your Path We have broken down who are users are into three categories and created different paths to navigate our DCC-EX system and this website. Don't worry, the paths are integrated and you can \"switch a turnout\" at any point and take another path. See below if you most identify with being a, \"Conductor\", a \"Tinkerer\" or an \"Engineer\". Conductor A Conductor mostly just wants to enjoy operating trains. You could be someone new to trains or picking it up after a long absence, or you could be someone coming from running DC and looking to switch over to DCC. This is also the perfect place for someone who just wants something that works without much tinkering. We provide an \"out of the box\" working solution that gives you a Command Station and a Controller and you are up and running in just a few minutes. In short, a conductor wants to drive trains and doesn't want to have to deal with the details of the hardware or software involved. This path will keep things simple. Tinkerer A Tinkerer likes the joy of building things themselves. They may not have an Engineering Degree, but they know how to connect a jumper wire and possibly use a soldering iron. They don't have a problem opening something like the Arduino IDE to change settings in a configuration file and upload it back to their Command Station. A Tinkerer wants to do more with model trains like using different motor controllers or getting into more detailed control of turnouts, sensors and other accessories. You may still use our standard Command Station kit, but many of you will build your own Command Station using an Arduino board and a Motor Shield. This path will provide more options over the Conductor path and cover things like using the JMRI software (Java Model Railroad Interface) for more advanced control of your locomotives and your track. Engineer An Engineer is a little more versed in computers and/or electronics. They have a desire to dig a little deeper into how things work. They can understand the basics of computer code and can look at the DCC++ EX program to at least make simple changes. They may want to help with offering their talents to the project. They are not averse to experimenting with things to make something work. These are the people whose layout looks like a telephone switching station when you look under their benchwork. This path will offer more technical information and cover more in depth topics like accessory control and customizing the DCC++ EX System. Keep these definitions in mind as you proceed through this website. Here is your first choice: You want to use a FireBox Command Station You want to put your Command Station together yourself using an Arduino board DIY Starter Kit","title":"Choose your Path"},{"location":"start/levels/#choose-your-path","text":"We have broken down who are users are into three categories and created different paths to navigate our DCC-EX system and this website. Don't worry, the paths are integrated and you can \"switch a turnout\" at any point and take another path. See below if you most identify with being a, \"Conductor\", a \"Tinkerer\" or an \"Engineer\".","title":"Choose Your Path"},{"location":"start/levels/#conductor","text":"A Conductor mostly just wants to enjoy operating trains. You could be someone new to trains or picking it up after a long absence, or you could be someone coming from running DC and looking to switch over to DCC. This is also the perfect place for someone who just wants something that works without much tinkering. We provide an \"out of the box\" working solution that gives you a Command Station and a Controller and you are up and running in just a few minutes. In short, a conductor wants to drive trains and doesn't want to have to deal with the details of the hardware or software involved. This path will keep things simple.","title":"Conductor"},{"location":"start/levels/#tinkerer","text":"A Tinkerer likes the joy of building things themselves. They may not have an Engineering Degree, but they know how to connect a jumper wire and possibly use a soldering iron. They don't have a problem opening something like the Arduino IDE to change settings in a configuration file and upload it back to their Command Station. A Tinkerer wants to do more with model trains like using different motor controllers or getting into more detailed control of turnouts, sensors and other accessories. You may still use our standard Command Station kit, but many of you will build your own Command Station using an Arduino board and a Motor Shield. This path will provide more options over the Conductor path and cover things like using the JMRI software (Java Model Railroad Interface) for more advanced control of your locomotives and your track.","title":"Tinkerer"},{"location":"start/levels/#engineer","text":"An Engineer is a little more versed in computers and/or electronics. They have a desire to dig a little deeper into how things work. They can understand the basics of computer code and can look at the DCC++ EX program to at least make simple changes. They may want to help with offering their talents to the project. They are not averse to experimenting with things to make something work. These are the people whose layout looks like a telephone switching station when you look under their benchwork. This path will offer more technical information and cover more in depth topics like accessory control and customizing the DCC++ EX System. Keep these definitions in mind as you proceed through this website. Here is your first choice: You want to use a FireBox Command Station You want to put your Command Station together yourself using an Arduino board DIY Starter Kit","title":"Engineer"},{"location":"start/rail-networking/","text":"Rail Networking Setup Work in progress","title":"Rail Networking"},{"location":"start/rail-networking/#rail-networking-setup","text":"Work in progress","title":"Rail Networking Setup"},{"location":"start/wifi-config/","text":"Wifi Configutation work in progress This page describes the software configuration options for using WiFi to connect your Command Station wirelessly to JMRI or a WiFi throttle like Engine Driver. For information on how to connect your hardware, click WiFi Setup Wireless Connections As mentioned in WiFi Setup , there are two main reasons for wanting to use WiFi; to connect to JMRI without having to use a USB cable or to connect to a WiThrottle compatible Controller like the Engine Driver moble app. In addition, you have two options for connecting your WiThrottle Controller to your Command Station. If you are using JMRI, you can leave your CS connected to the JMRI computer via the USB cable and connect your Controller via WiFi to the WiThrottle server running on the JMRI computer. If you don't need JMRI or just want to connect your WiFi Controller directly to the CS, then you connect to the WiThrottle Server running on your CS. What's a \"WiThrottle Server\"? WiThrottle stands for \"WiFi Throttle\" and a \"WiThrottle Server\" is just software running on your JMRI computer or on the DCC-EX Command Station. It's called a \"server\" because it allows you to connect to it and it \"serves\" or provides service to you via another application. That application is called a \"Client\". So your throttle in this case is the client. WiThrottle itself is a standard for how WiFi throttles can communicate with Command Stations much like the DCC standard is a standard for how data packets are communicate to decoders. What this means for you, is that any device that is WiThrottle compatible should work with DCC-EX. AP Mode vs. Station Mode There are two ways to connect your Throttle to either JMRI or the CS; \"Access Point Mode\" (aka \"AP MODE) and \"Station Mode\". We often abbreviate the latter to \"STA\". You will also see people refer to it as \"Client Mode\". We will focus on how to connect to the Command Station. For info on using WiFi with JMRI, click here AP Mode Most people will want to connect in AP mode. This is the default for DCC-EX. In this mode, your CS acts like an AP. In other words, it acts just like any other wireless router you could connect to. The router in your home is in effect, an AP. Using the CS in AP mode allows you to have to separate network so you can keep your layout network separate from your home network. If you travel to shows or take your setup to a friend's house, this allows for an autonomous, transportable system that does not need a connection to and hopefully will not interfere with, other networks. See Station Mode (STA Mode) Station mode allows you to connect the Command Station to your existing home network. The CS becomes a Station or Client rather than an AP. That means instead of being an AP your Throttle connects directly to, it becomes a station that connects to your existing network. The Throttle then connects to the CS by finding its IP address on the network. Default Operation - AP Mode (No Configuration Necessary) To use the default AP mode, you don't have to do anything other than connect an ESP8266 board as described in Wifi Setup . That's it! We find your device, no matter which of the extra serial ports you attached it to and create a WiThrottle server running and waiting for you to connect to. All you need to know is the IP address assigned by the WiFi board and the port to communicate through. You can find this using the Arduino Serial Monitor. Whenever you connect a USB cable and open the serial monitor you reset the program running on your CS. So it will go through the bootup sequence and try to connect to a network. If you did not setup a \"Station Mode\" configuration, or if that network is not in range, it will configure itself in AP mode. You will see this process by watching the serial monitor log window. Here are the important lines you need to look for. While the IP address is almost alwasy 192.168.4.1, it could be different on your system. You are looking for the items in the blue box below that are highlited in red Figure 1 - Serial Monitor Log You will see the line that has: AT+CIPSERVER=1,2560\\r\\r\\nno change\\r\\n\\r\\nOK\\r\\n 2560 is your port number Next you will see: +CIFSR:APIP,\"192.168.4.1\" That line givs your IP address of 192.168.4.1. Remember this address. APIP here stands for \"Access Point IP Address\" You will notice that your home network may have a range of 192.168.1.1 to 192.168.1.255 or similar. You can see that the \"4\" in the AP address means it is on a different subnet. Remember to enter it correctly into your WiFi Throttle when you configure that later. Once you see an AP IP Address and see `++ Wifi Setup OK ++ at the bottom of the log (it may take a few seconds for the CS to complete the configuration), you can connect to it. See the next section. Connecting to the AP There are two steps to get you running trains with your WiFi throttle, the first is to connect to the AP instead of your home network, the second is to connect your throttle to the AP. On your mobile device, go into your WiFi settings that same way you would to connect to your home router. Look for another network to connect to. You should see a new network that begins with \"DCCEX\" like this: DCCEX_6e321b Note that the last 6 letters and numbers will be specific to your WiFi board and uniquely identify it. Simply click on that network and connect to it. Ignore the warning that may popup telling you that \"Internet may not be available\". The CS is not connected to the internet and you are connecting your mobile device directly to it. Your mobile device can still access the internet via its cell tower connection. If you wish to use your home network internet (for example if your data plan is expensive), see the section below on Station Mode to connect using your home network instead Once you are connected to the CS, you can run your WiFi Throttle program, enter the IP Address for the Server Address, 2560 for the Port number, and then select and acquire your loco by its address. For more detail on configuring your WiThrottle capable throttle, click on one of the links below Engine Driver Connecting to your Network - Station Mode (edit config.h) In order to connect to your home network, you must open the config.h file in a text editor and enter your login credentials. The easies way to do this is to use the Arduino IDE and open the project . Look for these lines in the file: ///////////////////////////////////////////////////////////////////////////////////// // // NOTE : Only supported on Arduino Mega // Set to false if you not even want it on the Arduino Mega // # define ENABLE_WIFI true ///////////////////////////////////////////////////////////////////////////////////// // // DEFINE WiFi Parameters ( only in effect if WIFI is on ) // # define WIFI_SSID \"Your network name\" # define WIFI_PASSWORD \"Your network passwd\" # define WIFI_HOSTNAME \"dccex\" Figure 2 - Station Mode Configuration First, make sure that the #define ENABLE_WIFI true line is not commented out. two slashes // in front of a line make it a comment and not a line of code Next, enter your network information into the WIFI_SSID, WIFI_PASSORD and WIFI_HOSTNAME fields. Here is an example: #define WIFI_SSID \"JonesFamily\" #define WIFI_PASSWORD \"Secret!2020\" We recommend leaving WIFI_HOSTNAME to \"dccex\", but you can change it if you like. If your ESP826 WiFi board has a later version of firmware, that can allow you to connect using this name instead of the IP address. In other words, it allows that name to be an alias for the IP address. Resetting Network Settings Once you enter a network SSID and password, the CS will always try to connect to it, even after removing the power and restarting. If you want to connect in AP mode, or your network credentials change, or you need to connect to a different network, you simply need to tell your WiFi board to clear the settings. Go into your serial monitor and wait until the CS has gone through the startup sequence. Then in command textbox enter: +CWQAP and press \"SEND\". You will then see an \"Ok\" message. The WiFi Settings are forgotten. However, if your config.h has WiFi Credentials in it, then as soon as your CS restarts, it will load and save those settings again. So... If you want to run in AP mode Edit the config.h, remove your SSID and password, and then upload the project into the CS If you want to change your network login Edit the config.h file, change your SSID and password, and then upload the project into the CS Disabling WiFi Edit the config.h file. Comment out the line #define WIFI_ENABLE true by adding two forward slash marks ( // ). Then upload the project back to the CS.","title":"WIFI Configuration"},{"location":"start/wifi-config/#wifi-configutation","text":"work in progress This page describes the software configuration options for using WiFi to connect your Command Station wirelessly to JMRI or a WiFi throttle like Engine Driver. For information on how to connect your hardware, click WiFi Setup","title":"Wifi Configutation"},{"location":"start/wifi-config/#wireless-connections","text":"As mentioned in WiFi Setup , there are two main reasons for wanting to use WiFi; to connect to JMRI without having to use a USB cable or to connect to a WiThrottle compatible Controller like the Engine Driver moble app. In addition, you have two options for connecting your WiThrottle Controller to your Command Station. If you are using JMRI, you can leave your CS connected to the JMRI computer via the USB cable and connect your Controller via WiFi to the WiThrottle server running on the JMRI computer. If you don't need JMRI or just want to connect your WiFi Controller directly to the CS, then you connect to the WiThrottle Server running on your CS.","title":"Wireless Connections"},{"location":"start/wifi-config/#whats-a-withrottle-server","text":"WiThrottle stands for \"WiFi Throttle\" and a \"WiThrottle Server\" is just software running on your JMRI computer or on the DCC-EX Command Station. It's called a \"server\" because it allows you to connect to it and it \"serves\" or provides service to you via another application. That application is called a \"Client\". So your throttle in this case is the client. WiThrottle itself is a standard for how WiFi throttles can communicate with Command Stations much like the DCC standard is a standard for how data packets are communicate to decoders. What this means for you, is that any device that is WiThrottle compatible should work with DCC-EX.","title":"What's a \"WiThrottle Server\"?"},{"location":"start/wifi-config/#ap-mode-vs-station-mode","text":"There are two ways to connect your Throttle to either JMRI or the CS; \"Access Point Mode\" (aka \"AP MODE) and \"Station Mode\". We often abbreviate the latter to \"STA\". You will also see people refer to it as \"Client Mode\". We will focus on how to connect to the Command Station. For info on using WiFi with JMRI, click here","title":"AP Mode vs. Station Mode"},{"location":"start/wifi-config/#ap-mode","text":"Most people will want to connect in AP mode. This is the default for DCC-EX. In this mode, your CS acts like an AP. In other words, it acts just like any other wireless router you could connect to. The router in your home is in effect, an AP. Using the CS in AP mode allows you to have to separate network so you can keep your layout network separate from your home network. If you travel to shows or take your setup to a friend's house, this allows for an autonomous, transportable system that does not need a connection to and hopefully will not interfere with, other networks. See","title":"AP Mode"},{"location":"start/wifi-config/#station-mode-sta-mode","text":"Station mode allows you to connect the Command Station to your existing home network. The CS becomes a Station or Client rather than an AP. That means instead of being an AP your Throttle connects directly to, it becomes a station that connects to your existing network. The Throttle then connects to the CS by finding its IP address on the network.","title":"Station Mode (STA Mode)"},{"location":"start/wifi-config/#default-operation-ap-mode-no-configuration-necessary","text":"To use the default AP mode, you don't have to do anything other than connect an ESP8266 board as described in Wifi Setup . That's it! We find your device, no matter which of the extra serial ports you attached it to and create a WiThrottle server running and waiting for you to connect to. All you need to know is the IP address assigned by the WiFi board and the port to communicate through. You can find this using the Arduino Serial Monitor. Whenever you connect a USB cable and open the serial monitor you reset the program running on your CS. So it will go through the bootup sequence and try to connect to a network. If you did not setup a \"Station Mode\" configuration, or if that network is not in range, it will configure itself in AP mode. You will see this process by watching the serial monitor log window. Here are the important lines you need to look for. While the IP address is almost alwasy 192.168.4.1, it could be different on your system. You are looking for the items in the blue box below that are highlited in red Figure 1 - Serial Monitor Log You will see the line that has: AT+CIPSERVER=1,2560\\r\\r\\nno change\\r\\n\\r\\nOK\\r\\n 2560 is your port number Next you will see: +CIFSR:APIP,\"192.168.4.1\" That line givs your IP address of 192.168.4.1. Remember this address. APIP here stands for \"Access Point IP Address\" You will notice that your home network may have a range of 192.168.1.1 to 192.168.1.255 or similar. You can see that the \"4\" in the AP address means it is on a different subnet. Remember to enter it correctly into your WiFi Throttle when you configure that later. Once you see an AP IP Address and see `++ Wifi Setup OK ++ at the bottom of the log (it may take a few seconds for the CS to complete the configuration), you can connect to it. See the next section.","title":"Default Operation - AP Mode (No Configuration Necessary)"},{"location":"start/wifi-config/#connecting-to-the-ap","text":"There are two steps to get you running trains with your WiFi throttle, the first is to connect to the AP instead of your home network, the second is to connect your throttle to the AP. On your mobile device, go into your WiFi settings that same way you would to connect to your home router. Look for another network to connect to. You should see a new network that begins with \"DCCEX\" like this: DCCEX_6e321b Note that the last 6 letters and numbers will be specific to your WiFi board and uniquely identify it. Simply click on that network and connect to it. Ignore the warning that may popup telling you that \"Internet may not be available\". The CS is not connected to the internet and you are connecting your mobile device directly to it. Your mobile device can still access the internet via its cell tower connection. If you wish to use your home network internet (for example if your data plan is expensive), see the section below on Station Mode to connect using your home network instead Once you are connected to the CS, you can run your WiFi Throttle program, enter the IP Address for the Server Address, 2560 for the Port number, and then select and acquire your loco by its address. For more detail on configuring your WiThrottle capable throttle, click on one of the links below Engine Driver","title":"Connecting to the AP"},{"location":"start/wifi-config/#connecting-to-your-network-station-mode-edit-configh","text":"In order to connect to your home network, you must open the config.h file in a text editor and enter your login credentials. The easies way to do this is to use the Arduino IDE and open the project . Look for these lines in the file: ///////////////////////////////////////////////////////////////////////////////////// // // NOTE : Only supported on Arduino Mega // Set to false if you not even want it on the Arduino Mega // # define ENABLE_WIFI true ///////////////////////////////////////////////////////////////////////////////////// // // DEFINE WiFi Parameters ( only in effect if WIFI is on ) // # define WIFI_SSID \"Your network name\" # define WIFI_PASSWORD \"Your network passwd\" # define WIFI_HOSTNAME \"dccex\" Figure 2 - Station Mode Configuration First, make sure that the #define ENABLE_WIFI true line is not commented out. two slashes // in front of a line make it a comment and not a line of code Next, enter your network information into the WIFI_SSID, WIFI_PASSORD and WIFI_HOSTNAME fields. Here is an example: #define WIFI_SSID \"JonesFamily\" #define WIFI_PASSWORD \"Secret!2020\" We recommend leaving WIFI_HOSTNAME to \"dccex\", but you can change it if you like. If your ESP826 WiFi board has a later version of firmware, that can allow you to connect using this name instead of the IP address. In other words, it allows that name to be an alias for the IP address.","title":"Connecting to your Network - Station Mode (edit config.h)"},{"location":"start/wifi-config/#resetting-network-settings","text":"Once you enter a network SSID and password, the CS will always try to connect to it, even after removing the power and restarting. If you want to connect in AP mode, or your network credentials change, or you need to connect to a different network, you simply need to tell your WiFi board to clear the settings. Go into your serial monitor and wait until the CS has gone through the startup sequence. Then in command textbox enter: +CWQAP and press \"SEND\". You will then see an \"Ok\" message. The WiFi Settings are forgotten. However, if your config.h has WiFi Credentials in it, then as soon as your CS restarts, it will load and save those settings again. So...","title":"Resetting Network Settings"},{"location":"start/wifi-config/#if-you-want-to-run-in-ap-mode","text":"Edit the config.h, remove your SSID and password, and then upload the project into the CS","title":"If you want to run in AP mode"},{"location":"start/wifi-config/#if-you-want-to-change-your-network-login","text":"Edit the config.h file, change your SSID and password, and then upload the project into the CS","title":"If you want to change your network login"},{"location":"start/wifi-config/#disabling-wifi","text":"Edit the config.h file. Comment out the line #define WIFI_ENABLE true by adding two forward slash marks ( // ). Then upload the project back to the CS.","title":"Disabling WiFi"},{"location":"start/wifi-setup/","text":"WiFi Setup There are many ways to add Wifi to your CS. We will cover three methods here. Any level from Conductor to Engineer should be comfortable here, however you will need to know a little bit about networking. If you can get your phone and your Roku to connect to your network, you can do this. You should be able to apply what you learn here to using other boards, but you can ask us for help using any of the links on our Support Page if you have a question. Why Use WiFi? The biggest reason many people want to add WiFi is to go wireless! With the base CS consisting of an Arduino Mega and an Arduino Motor Shield, you must use a serial cable to connect to a computer to run JMRI, our exWebThrottle, or other another Controller. The controller is what sends commands to the CS to run your trains and control your accessories. An astute observer may note that you can go wireless when using software like JMRI. That's true! But you need another computer to do it. With DCC++ EX WiFi, you can connect directly to your CS from any WiThrottle capable throttle, such as the Engine Driver phone app. Previously, to connect a wireless throttle like Engine Driver to the CS, you needed another computer running JMRI (The Java Model Railroad Interface Program) with that computer connected to the CS via a serial cable. JMRI exposes a \"WiThrottle Server\" on the Wifi capable computer it runs on. You would then connect Engine Driver wirelessly to that computer and the computer and JMRI act as middleware to connect to the CS. And this is a great solution. Plenty of people want to take advantage of all the functionality inside JMRI that can run your entire layout. But many of you tell us that you just want to run trains. So whether you are at a show or just have a layout at home where a throttle (aka CAB) will do everything you need, you can connect directly to the CS without any other hardware or software. Compatible Boards Most boards based on the ESP-8266 should work with DCC++ EX. However, with all the variations and software versions out there, we've compiled this list of known tested, working hardware. We will add more over time. Makerfabs ESP-8266 WiFi Shield Duinopeak ESP-8266 WiFi Expansion Board (plus an ESP-01 or 01s) ESP-01 or ESP-01s Board (This is not a shield. You will need to jumper 5 wires) Note All the boards mentioned here operate on the 2.4GHz band. And a fun fact is that the DCC signal averages around 8kHz (It varies between 5kHz and 8.6kHz). That means it cycles between states 8,000 times a second. 2.4GHz is in the microwave band (which is why a leaky microwave oven can wreak havoc on your network) which switches back and forth 2.4 BILLION times per second! What you will need A Command Station (CS) made from a Mega and an Arduino Motor Shield One of the above boards Two (2) Male to Female Jumpers (plus 3 more if you are using an ESP-01 or 01s) Makerfabs ESP-8266 WiFi Shield (recommended) We like this board at DCC++ EX labs. It is simple, inexpensive, easy to use, and it works. Figure 1 - Makerfabs ESP-8266 WiFi Shield Installing the board follows the same procedure in the previous section on assembly . Start by noting the tab end of the board and align it with the tab end of the motor board. You will stick this board on top to make a three board stack. Remove the plastic jumpers Note the two black plastic jumpers, we need to remove both of them. You can pull them off with your fingers or needle nose pliers and either stick them in a drawer or move them to the side by having them connect via one side to any of the row of Rx pins. The other end of the connector will just hang out over the Wifi Board. Figure 2 - Remove the plastic jumpers Align the boards Turn the board so that the tab end is to the left and the power connectors on the other boards are to the right. You will be looking at the left side of the shield. Align it so that the pins align starting with the tab end of the boards. The Tx, Rx, 2, 3, 4, 6, 6, 7 pins on the Motor Shield line up with the 0 through 7 pins on the Makerfabs WiFi Board. Start to get this row partially seated so all the pins are lined up with the holes. Note that there are more holes than pins. The two header holes closest to the power connectors will be empty. Figure 3 - Get the left side pins aligned Seat the boards Now do the the other side. If all the pins are straight and lined up properly, hold both sides of the board and press it together gently (Figure 4). Note that the pins are quite long and will not go all the way into the header. You shoud have even more of the pins showing between the bottom of the WiFi board and the top of the header on the Motor Board than between the Motor Board and the Arduino. This is normal (Figure 5). Figure 4 - Get the right side pins aligned Figure 5 - Fully Seated Boards Install the jumper wires We now need to connect The Transmit (Tx) and Receive (Rx) pins on the ESP-8266 to the Rx and Tx pins for Serial1 on the Mega. The mega has one serial port connected to the USB port and then 3 extra ones we can access from pins on the board. You can think of Tx as \"talking\" and Rx as \"listening\". That will help you remember that if one thing is talking, the other has to use its ears to listen. So we must connect the Tx of the WiFi board to Rx1 on the Mega and the Rx pin on the WiFi Board to Tx1 on the Mega. There are three rows of pins on the Makerfabs WiFi shield. The middle pins each connect to one of the first 8 pins on the header. Pin 0 goes to header pin 0, pin 1 goes to header pin 2, and so on. We aren't going to need those. With the plastic jumpers removed, nothing will be connected to any of those pins on the WiFi Board and therefore not connected down to the Mega through the Motor Shield. ALL of the pins in the row marked Tx (the row closest to the header) are connected to the Tx pin of the ESP-8266. ALL of the pins in the row marked Rx (the row closes to the middle of the board) are connected to the Rx pin on the ESP-8266 Take a jumper wire and connect it to any one of the Tx pins on the WiFi Board and connect the other end to the Rx1 pin on the mega (pin 19) Take a second jumper wire and connect it to any one of the Rx pins on the Wifi Board and connect the other end to Tx1 on the mega (pin 18) Figure 6 - Install the jumper wires Note The screen printing on the board may make it hard to see which pins are 18 and 19, they may not be aligned exactly. Count the pins if you need to to make sure that you are using the correct ones. Install the software If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here WiFi Configuration If you are setting up your Command Station for the first time, or are making changes click on the basic setup link below to install your software onto the CS. Next Step: Installing the sofware Duinopeak ESP-8266 WiFi Expansion Board This board is designed as an expansion/prototyping board as well as a WiFi board. So you Tinkerers or Engineers that want the extra space on the board to solder your expriements can have a party on PCB. The only caveat with this board is that it cannot easily be connected in \"passthrough mode\" if you needed to use the Arduino to test a direct connection to the on board ESP-8266. It does not like the USB cable connected at the same time as a signal is on the Tx/Rx pins. This is a minor issue and does not affect normal operation since you won't have anything connected to the USB port. Note This is just a carrier board for an ESP-01 or 01s. You will still need an ESP-01s to stick onto this board. See the next section. Figure 7 - Duinopeak WiFi Board Install the Hardware To install this board on your Arduino, follow the same steps as above with the added step of installing and ESP-01s onto the board: Remove or place the plastic pin jumpers to the side Align and seat the board Use wire jumpers to connect any Rx pin to Tx1 on the Mega and any Tx pin to Rx1 on the Mega Seat an ESP-01s onto the 8 pin header on the board oriented with the white ESP-01 outline Install the Software If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here If you are setting up your Command Station for the first time, or are making changes click on the \"Installing the sofware\" link below to install your software onto the CS. Next Step: Installing the sofware ESP-01 or ESP-01s This is the board that started it all. It fueled the WiFi revolution in small devices. In fact, this little board is actually a microcontroller that is more powerful than the Arduno Uno! The difference between the 01 and the 01s is prirmarily that there is more memory on the 01s. Since the 01 version has been retired, any new board you get should be the 01s, but either will work. Figure 8 - ESP-01s Install the Hardware Below is a wiring diagram for connecting the ESP-8266 to the Arduino. For clarity, the image does not show the motor board already on top of the Mega, but since the headers connect all the pins together vertically, you can find the same pins on the motor board to get the 3.3V and Gnd to power the ESP-8266. Figure 9 - Wiring and ESP-01s to a Mega Wiring Arduino ESP8266 3.3V -----> Vcc 3.3V -----> CH_PD Gnd -----> Gnd Tx -----> Rx Rx -----> Tx In order to connect both Vcc and CH_PD to the 3.3V output of the arduino, you can make a \"Y\" shaped jumper or put the ESP-01s on a small circuit board and wire it that way. Below are little boards you can buy called \"ESP-01 Breakout Board\" or \"ESP-01 Breadboard adapter\". Some even have a voltage regulator so you can use the 5V power from the Mega instead of 3.3V Note While we at DCC-EX Labs have had success with running the ESP-01s off the 3.3V Mega power supply, this is at the limit of what the Mega can supply. The Mega 3.3V regulator is only rated for 200mA. The ESP can exceed this in short bursts. If you want to be safe, you can power a 5V to 3.3V regulator from the 5V supply or find another way to provide clean, regulated 3.3V to the ESP Figure 10 - ESP-01 Breakout Boards Note The ESP-8266 chips are designed for 3.3V DO NOT TRY TO CONNECT THEM TO 5V!! But while they cannot handle 5 volts for power, their GPIO pins are 5V tolerant. Because of that, and the fact that the Mega will still see 3.3V as a \"high\" signal, you don't need any other circuitry. Install the Software If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here If you are setting up your Command Station for the first time, or are making changes click on one of the install links below to install your software onto the CS. If you want more information about Wifi or to change your Wifi Configuration click this hyperlink. Installing the software Next Page If you are ready to install the software using the DCC-EX Installer Install using the Automated Installer If you are installing using the Arduino IDE Install using the Arduino IDE","title":"Adding WiFi"},{"location":"start/wifi-setup/#wifi-setup","text":"There are many ways to add Wifi to your CS. We will cover three methods here. Any level from Conductor to Engineer should be comfortable here, however you will need to know a little bit about networking. If you can get your phone and your Roku to connect to your network, you can do this. You should be able to apply what you learn here to using other boards, but you can ask us for help using any of the links on our Support Page if you have a question.","title":"WiFi Setup"},{"location":"start/wifi-setup/#why-use-wifi","text":"The biggest reason many people want to add WiFi is to go wireless! With the base CS consisting of an Arduino Mega and an Arduino Motor Shield, you must use a serial cable to connect to a computer to run JMRI, our exWebThrottle, or other another Controller. The controller is what sends commands to the CS to run your trains and control your accessories. An astute observer may note that you can go wireless when using software like JMRI. That's true! But you need another computer to do it. With DCC++ EX WiFi, you can connect directly to your CS from any WiThrottle capable throttle, such as the Engine Driver phone app. Previously, to connect a wireless throttle like Engine Driver to the CS, you needed another computer running JMRI (The Java Model Railroad Interface Program) with that computer connected to the CS via a serial cable. JMRI exposes a \"WiThrottle Server\" on the Wifi capable computer it runs on. You would then connect Engine Driver wirelessly to that computer and the computer and JMRI act as middleware to connect to the CS. And this is a great solution. Plenty of people want to take advantage of all the functionality inside JMRI that can run your entire layout. But many of you tell us that you just want to run trains. So whether you are at a show or just have a layout at home where a throttle (aka CAB) will do everything you need, you can connect directly to the CS without any other hardware or software.","title":"Why Use WiFi?"},{"location":"start/wifi-setup/#compatible-boards","text":"Most boards based on the ESP-8266 should work with DCC++ EX. However, with all the variations and software versions out there, we've compiled this list of known tested, working hardware. We will add more over time. Makerfabs ESP-8266 WiFi Shield Duinopeak ESP-8266 WiFi Expansion Board (plus an ESP-01 or 01s) ESP-01 or ESP-01s Board (This is not a shield. You will need to jumper 5 wires) Note All the boards mentioned here operate on the 2.4GHz band. And a fun fact is that the DCC signal averages around 8kHz (It varies between 5kHz and 8.6kHz). That means it cycles between states 8,000 times a second. 2.4GHz is in the microwave band (which is why a leaky microwave oven can wreak havoc on your network) which switches back and forth 2.4 BILLION times per second!","title":"Compatible Boards"},{"location":"start/wifi-setup/#what-you-will-need","text":"A Command Station (CS) made from a Mega and an Arduino Motor Shield One of the above boards Two (2) Male to Female Jumpers (plus 3 more if you are using an ESP-01 or 01s)","title":"What you will need"},{"location":"start/wifi-setup/#makerfabs-esp-8266-wifi-shield-recommended","text":"We like this board at DCC++ EX labs. It is simple, inexpensive, easy to use, and it works. Figure 1 - Makerfabs ESP-8266 WiFi Shield Installing the board follows the same procedure in the previous section on assembly . Start by noting the tab end of the board and align it with the tab end of the motor board. You will stick this board on top to make a three board stack.","title":"Makerfabs ESP-8266 WiFi Shield (recommended)"},{"location":"start/wifi-setup/#remove-the-plastic-jumpers","text":"Note the two black plastic jumpers, we need to remove both of them. You can pull them off with your fingers or needle nose pliers and either stick them in a drawer or move them to the side by having them connect via one side to any of the row of Rx pins. The other end of the connector will just hang out over the Wifi Board. Figure 2 - Remove the plastic jumpers","title":"Remove the plastic jumpers"},{"location":"start/wifi-setup/#align-the-boards","text":"Turn the board so that the tab end is to the left and the power connectors on the other boards are to the right. You will be looking at the left side of the shield. Align it so that the pins align starting with the tab end of the boards. The Tx, Rx, 2, 3, 4, 6, 6, 7 pins on the Motor Shield line up with the 0 through 7 pins on the Makerfabs WiFi Board. Start to get this row partially seated so all the pins are lined up with the holes. Note that there are more holes than pins. The two header holes closest to the power connectors will be empty. Figure 3 - Get the left side pins aligned","title":"Align the boards"},{"location":"start/wifi-setup/#seat-the-boards","text":"Now do the the other side. If all the pins are straight and lined up properly, hold both sides of the board and press it together gently (Figure 4). Note that the pins are quite long and will not go all the way into the header. You shoud have even more of the pins showing between the bottom of the WiFi board and the top of the header on the Motor Board than between the Motor Board and the Arduino. This is normal (Figure 5). Figure 4 - Get the right side pins aligned Figure 5 - Fully Seated Boards","title":"Seat the boards"},{"location":"start/wifi-setup/#install-the-jumper-wires","text":"We now need to connect The Transmit (Tx) and Receive (Rx) pins on the ESP-8266 to the Rx and Tx pins for Serial1 on the Mega. The mega has one serial port connected to the USB port and then 3 extra ones we can access from pins on the board. You can think of Tx as \"talking\" and Rx as \"listening\". That will help you remember that if one thing is talking, the other has to use its ears to listen. So we must connect the Tx of the WiFi board to Rx1 on the Mega and the Rx pin on the WiFi Board to Tx1 on the Mega. There are three rows of pins on the Makerfabs WiFi shield. The middle pins each connect to one of the first 8 pins on the header. Pin 0 goes to header pin 0, pin 1 goes to header pin 2, and so on. We aren't going to need those. With the plastic jumpers removed, nothing will be connected to any of those pins on the WiFi Board and therefore not connected down to the Mega through the Motor Shield. ALL of the pins in the row marked Tx (the row closest to the header) are connected to the Tx pin of the ESP-8266. ALL of the pins in the row marked Rx (the row closes to the middle of the board) are connected to the Rx pin on the ESP-8266 Take a jumper wire and connect it to any one of the Tx pins on the WiFi Board and connect the other end to the Rx1 pin on the mega (pin 19) Take a second jumper wire and connect it to any one of the Rx pins on the Wifi Board and connect the other end to Tx1 on the mega (pin 18) Figure 6 - Install the jumper wires Note The screen printing on the board may make it hard to see which pins are 18 and 19, they may not be aligned exactly. Count the pins if you need to to make sure that you are using the correct ones.","title":"Install the jumper wires"},{"location":"start/wifi-setup/#install-the-software","text":"If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here WiFi Configuration If you are setting up your Command Station for the first time, or are making changes click on the basic setup link below to install your software onto the CS. Next Step: Installing the sofware","title":"Install the software"},{"location":"start/wifi-setup/#duinopeak-esp-8266-wifi-expansion-board","text":"This board is designed as an expansion/prototyping board as well as a WiFi board. So you Tinkerers or Engineers that want the extra space on the board to solder your expriements can have a party on PCB. The only caveat with this board is that it cannot easily be connected in \"passthrough mode\" if you needed to use the Arduino to test a direct connection to the on board ESP-8266. It does not like the USB cable connected at the same time as a signal is on the Tx/Rx pins. This is a minor issue and does not affect normal operation since you won't have anything connected to the USB port. Note This is just a carrier board for an ESP-01 or 01s. You will still need an ESP-01s to stick onto this board. See the next section. Figure 7 - Duinopeak WiFi Board","title":"Duinopeak ESP-8266 WiFi Expansion Board"},{"location":"start/wifi-setup/#install-the-hardware","text":"To install this board on your Arduino, follow the same steps as above with the added step of installing and ESP-01s onto the board: Remove or place the plastic pin jumpers to the side Align and seat the board Use wire jumpers to connect any Rx pin to Tx1 on the Mega and any Tx pin to Rx1 on the Mega Seat an ESP-01s onto the 8 pin header on the board oriented with the white ESP-01 outline","title":"Install the Hardware"},{"location":"start/wifi-setup/#install-the-software_1","text":"If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here If you are setting up your Command Station for the first time, or are making changes click on the \"Installing the sofware\" link below to install your software onto the CS. Next Step: Installing the sofware","title":"Install the Software"},{"location":"start/wifi-setup/#esp-01-or-esp-01s","text":"This is the board that started it all. It fueled the WiFi revolution in small devices. In fact, this little board is actually a microcontroller that is more powerful than the Arduno Uno! The difference between the 01 and the 01s is prirmarily that there is more memory on the 01s. Since the 01 version has been retired, any new board you get should be the 01s, but either will work. Figure 8 - ESP-01s","title":"ESP-01 or ESP-01s"},{"location":"start/wifi-setup/#install-the-hardware_1","text":"Below is a wiring diagram for connecting the ESP-8266 to the Arduino. For clarity, the image does not show the motor board already on top of the Mega, but since the headers connect all the pins together vertically, you can find the same pins on the motor board to get the 3.3V and Gnd to power the ESP-8266. Figure 9 - Wiring and ESP-01s to a Mega Wiring Arduino ESP8266 3.3V -----> Vcc 3.3V -----> CH_PD Gnd -----> Gnd Tx -----> Rx Rx -----> Tx In order to connect both Vcc and CH_PD to the 3.3V output of the arduino, you can make a \"Y\" shaped jumper or put the ESP-01s on a small circuit board and wire it that way. Below are little boards you can buy called \"ESP-01 Breakout Board\" or \"ESP-01 Breadboard adapter\". Some even have a voltage regulator so you can use the 5V power from the Mega instead of 3.3V Note While we at DCC-EX Labs have had success with running the ESP-01s off the 3.3V Mega power supply, this is at the limit of what the Mega can supply. The Mega 3.3V regulator is only rated for 200mA. The ESP can exceed this in short bursts. If you want to be safe, you can power a 5V to 3.3V regulator from the 5V supply or find another way to provide clean, regulated 3.3V to the ESP Figure 10 - ESP-01 Breakout Boards Note The ESP-8266 chips are designed for 3.3V DO NOT TRY TO CONNECT THEM TO 5V!! But while they cannot handle 5 volts for power, their GPIO pins are 5V tolerant. Because of that, and the fact that the Mega will still see 3.3V as a \"high\" signal, you don't need any other circuitry.","title":"Install the Hardware"},{"location":"start/wifi-setup/#install-the-software_2","text":"If you already have the CS sofware running and are just adding WiFi, there is nothing further you need to do if you want to use the CS as an Access Point (AP) and connect a WiThrottle compatible CAB (Engine Driver). The next time you power up the CS, it will automatically find your WiFi board and what port it is connected to. See the detailed instructions here If you are setting up your Command Station for the first time, or are making changes click on one of the install links below to install your software onto the CS. If you want more information about Wifi or to change your Wifi Configuration click this hyperlink.","title":"Install the Software"},{"location":"start/wifi-setup/#installing-the-software","text":"Next Page If you are ready to install the software using the DCC-EX Installer Install using the Automated Installer If you are installing using the Arduino IDE Install using the Arduino IDE","title":"Installing the software"},{"location":"support/create-ticket-form/","text":"","title":"Create Support Ticket"},{"location":"support/get-support/","text":"How To Get Support You can best reach us on our Discord server. You can also send an email to support@dcc-ex.com or use the form at using the \"get support\" link to the left\". We try to follow FaceBook and JMRI groups, but there are just too many separate groups to see and respond to all the message. Thank you for your support! DCC++ EX Trainboard Forum DCC++ EX Discord Server","title":"How To Get Support"},{"location":"support/get-support/#how-to-get-support","text":"You can best reach us on our Discord server. You can also send an email to support@dcc-ex.com or use the form at using the \"get support\" link to the left\". We try to follow FaceBook and JMRI groups, but there are just too many separate groups to see and respond to all the message. Thank you for your support! DCC++ EX Trainboard Forum DCC++ EX Discord Server","title":"How To Get Support"},{"location":"throttles/ex-webthrottle/","text":"DCC++ EX Web Throttle This is a new DCC++ EX Throttle/Controller that can connect to the DCC++ EX Commmand Station directly through the USB port of a computer. What you need to setup the project Chromium-Based Browser version 80 or above (Chrome, Opera, Edge) You must enable the experimental Web Serial API To enable the Web Serial API, in your browser URL bar type: chrome://flags Then set the #enable-experimental-web-platform-features flag by looking on the page for \"Experimental Web Platform Features\" and click on the \"enable\" button. Note : Substitute the name of your browser above if you don't use Chrome What you\u2019ll need to use this application You don't need anything to test it out and to run in emulator mode, to run trains you will need: An Arduino Mega or Uno Microcontroller An Arduino Motor Control Shield Chromium based browser version 80 or later Getting started Note If you don't have your hardware yet or just want to play with the throttle and see commands being sent to the log window, you can skip to the operation section. To get started, connect your Command Station to a computer that has a USB port and have a compatible browser installed. Use a USB serial cable from your computer to the serial connector on the Arduino. Click on the \"index.html\" or \"exwebthrotle.html\" file to load the webpage. Operation To use the program, you can either click on the \"Serial\" dropodown button and select \"Emulator\" to run in emulator mode or after making sure your hardware is properly connected, select \"Serial\" Next, click on the \"Connect DCC++ EX\" button. If you are in \"emulator mode\", you can skip to the next step. When using the serial connection, if the program finds a compatible device, it will open a popup a window showing you a selection. It may show a line at the top such as \"Arduino Mega 2560 (COM3)\". Your com port may vary. Click on your board to select it and then click the \"Connect DCC++ EX\" button. You should then be connected to the Command Station (CS) and should see the response from the CS in the log textbox of the debug console at the bottom of the throttle window. Make sure your debug console is open. If it isn't, use the slider button in the lower left to open it. You can also open the DevTools window in your browser to see more developer logging. Once you are connected, you can enter the <s> command in the \"direct command\" textbox to get status information from your Command Station. To do this just enter s (without the quotes) and press the SEND button. You can send any DCC++ API command in this way. You should see returned in the log window with your version, type of arduino, type of motor shield, and some other information. Now you are ready to run trains! Place your loco on the track and click the power slider button to turn on power to your track. You should see lights on your Arduino Motor Shield and an indication that your loco has power. Note Make sure you place the loco on the MAIN track, not the PROGRAM track. Check your wiring. On an Arduino Motor Shield, Motor Output \"A\" should connect to your MAIN track and \"B\" to the PROGRAM track. Next go to the \"Locomotive ID\" textbox and enter the address of your loco and press the \"Acquire\" button. You should now have full control over your loco. All the function buttons should be working, so you can play with the headlight, horn and bell and any other function assigned to a function button. The commands being sent to the CS and its responses will display in the log window if it is open In the throttle control area to the left of the function buttons are vertical controls to control direction. The up arrow selects forward, the square button is stop and the down arrow is reverse. The circular control or vertical slider (chosen by the throttle select slider) can be moved by clicking and holding down the mouse button and dragging, clicking at a spot where you want the throttle to move, or clicking the + and - buttons. The options button lets you save labels to go on your function buttons for each of your locos. We will be updating this document soon to give you more information on this and other new features. Note Not all CS functions are fully supported in the emulator yet. This means that although the software works, not all the responses will be shown in the debug console. This will be completed in a next release. Try it now Just click this button and it will load a web page from our server that will run the web throttle on your machine. You can connect it to DCC++ EX or just run it in emulator mode where you don't have to have any hardware. Please read the instructions above for what is required to run exWebThrottle in your browser. Run exWebThrottle Now Download Just download this zip file and extract it to any folder you have run permission on. Then run the index.html file. exWebThrottle Zip File Going Further / Developing If you want to really delve into how this works and help us improve it with your comments or your development skills, please contact us. To load the Chrome DevTools to look at logging and be able to manually enter \"write\" commands for testing, click on the Menu (the 3 vertical dots in the upper right hand corner of the Chrome Window), then select \"more tools\" and then \"Developer Tools\". Or you can just hit \"Ctrl-Shift-I\". License Copyright 2020 DCC-EX Licensed under the GNU open source licese. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. DCC-EX","title":"exWebThrottle"},{"location":"throttles/ex-webthrottle/#dcc-ex-web-throttle","text":"This is a new DCC++ EX Throttle/Controller that can connect to the DCC++ EX Commmand Station directly through the USB port of a computer.","title":"DCC++ EX Web Throttle"},{"location":"throttles/ex-webthrottle/#what-you-need-to-setup-the-project","text":"Chromium-Based Browser version 80 or above (Chrome, Opera, Edge) You must enable the experimental Web Serial API To enable the Web Serial API, in your browser URL bar type: chrome://flags Then set the #enable-experimental-web-platform-features flag by looking on the page for \"Experimental Web Platform Features\" and click on the \"enable\" button. Note : Substitute the name of your browser above if you don't use Chrome","title":"What you need to setup the project"},{"location":"throttles/ex-webthrottle/#what-youll-need-to-use-this-application","text":"You don't need anything to test it out and to run in emulator mode, to run trains you will need: An Arduino Mega or Uno Microcontroller An Arduino Motor Control Shield Chromium based browser version 80 or later","title":"What you\u2019ll need to use this application"},{"location":"throttles/ex-webthrottle/#getting-started","text":"Note If you don't have your hardware yet or just want to play with the throttle and see commands being sent to the log window, you can skip to the operation section. To get started, connect your Command Station to a computer that has a USB port and have a compatible browser installed. Use a USB serial cable from your computer to the serial connector on the Arduino. Click on the \"index.html\" or \"exwebthrotle.html\" file to load the webpage.","title":"Getting started"},{"location":"throttles/ex-webthrottle/#operation","text":"To use the program, you can either click on the \"Serial\" dropodown button and select \"Emulator\" to run in emulator mode or after making sure your hardware is properly connected, select \"Serial\" Next, click on the \"Connect DCC++ EX\" button. If you are in \"emulator mode\", you can skip to the next step. When using the serial connection, if the program finds a compatible device, it will open a popup a window showing you a selection. It may show a line at the top such as \"Arduino Mega 2560 (COM3)\". Your com port may vary. Click on your board to select it and then click the \"Connect DCC++ EX\" button. You should then be connected to the Command Station (CS) and should see the response from the CS in the log textbox of the debug console at the bottom of the throttle window. Make sure your debug console is open. If it isn't, use the slider button in the lower left to open it. You can also open the DevTools window in your browser to see more developer logging. Once you are connected, you can enter the <s> command in the \"direct command\" textbox to get status information from your Command Station. To do this just enter s (without the quotes) and press the SEND button. You can send any DCC++ API command in this way. You should see returned in the log window with your version, type of arduino, type of motor shield, and some other information. Now you are ready to run trains! Place your loco on the track and click the power slider button to turn on power to your track. You should see lights on your Arduino Motor Shield and an indication that your loco has power. Note Make sure you place the loco on the MAIN track, not the PROGRAM track. Check your wiring. On an Arduino Motor Shield, Motor Output \"A\" should connect to your MAIN track and \"B\" to the PROGRAM track. Next go to the \"Locomotive ID\" textbox and enter the address of your loco and press the \"Acquire\" button. You should now have full control over your loco. All the function buttons should be working, so you can play with the headlight, horn and bell and any other function assigned to a function button. The commands being sent to the CS and its responses will display in the log window if it is open In the throttle control area to the left of the function buttons are vertical controls to control direction. The up arrow selects forward, the square button is stop and the down arrow is reverse. The circular control or vertical slider (chosen by the throttle select slider) can be moved by clicking and holding down the mouse button and dragging, clicking at a spot where you want the throttle to move, or clicking the + and - buttons. The options button lets you save labels to go on your function buttons for each of your locos. We will be updating this document soon to give you more information on this and other new features. Note Not all CS functions are fully supported in the emulator yet. This means that although the software works, not all the responses will be shown in the debug console. This will be completed in a next release.","title":"Operation"},{"location":"throttles/ex-webthrottle/#try-it-now","text":"Just click this button and it will load a web page from our server that will run the web throttle on your machine. You can connect it to DCC++ EX or just run it in emulator mode where you don't have to have any hardware. Please read the instructions above for what is required to run exWebThrottle in your browser. Run exWebThrottle Now","title":"Try it now"},{"location":"throttles/ex-webthrottle/#download","text":"Just download this zip file and extract it to any folder you have run permission on. Then run the index.html file. exWebThrottle Zip File","title":"Download"},{"location":"throttles/ex-webthrottle/#going-further-developing","text":"If you want to really delve into how this works and help us improve it with your comments or your development skills, please contact us. To load the Chrome DevTools to look at logging and be able to manually enter \"write\" commands for testing, click on the Menu (the 3 vertical dots in the upper right hand corner of the Chrome Window), then select \"more tools\" and then \"Developer Tools\". Or you can just hit \"Ctrl-Shift-I\".","title":"Going Further / Developing"},{"location":"throttles/ex-webthrottle/#license","text":"Copyright 2020 DCC-EX Licensed under the GNU open source licese. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. DCC-EX","title":"License"},{"location":"tinker/tinkering/","text":"Tinker With DCC++ EX Work in progress","title":"Tinker with DCC EX"},{"location":"tinker/tinkering/#tinker-with-dcc-ex","text":"Work in progress","title":"Tinker With DCC++ EX"}]}