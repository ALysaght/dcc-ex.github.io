{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to DCC++ EX An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology. Our Mission Our mission is to open the world of model railroading and make it universally accesible. In order to achieve that, DCC++ EX is providing the model railroad community with a complete, open source DCC (Digital Command Control) system - one that is simple, affordable, and expandable, to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future. What is DCC++ EX? In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. A basic DCC++ EX system can use easy to find, widely avalable Arduino boards that you can plug in yourself. You may even have one sitting around in your project drawer! Or, you can use our FireBox Control Station for something that is just plug-and-play. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes What's new in DCC++ EX? Complete support for all the old commands and front ends like JMRI Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) Simpler, modular, faster code with an API Library for developers for easy expansion No more jumpers or soldering! (Beta) New features and functionsn in JMRI (coming) Automation (Alpha) NOTE: The Next release will be a major rewrite to the code. We started from scratch and are rebuilding from the ground up! For what that means to you, click HERE . The system consists of multiple parts: Command Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the your command station There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"Home"},{"location":"#welcome-to-dcc-ex","text":"An open-source hardware and software platform for the operation of DCC-equipped model railroads. Welcome to the DCC++ EX website. DCC++ EX is an open-source hardware and software platform for the operation of DCC-equipped model railroads. It is based on Gregg E. Berman's DCC++ code. DCC-EX picks up where the original DCC++ left off. By addressing some previous issues, we have released what we now call \"DCC++ Classic\" - everything you enjoyed in the original version in a stable release. In addition, we have have continued development with an all new version called \"DCC-EX\" that includes enhancements and upgrades. We intend to organize this all in one place so that development can continue and the platform can adjust to new hardware and technnology.","title":"Welcome to DCC++ EX"},{"location":"#our-mission","text":"Our mission is to open the world of model railroading and make it universally accesible. In order to achieve that, DCC++ EX is providing the model railroad community with a complete, open source DCC (Digital Command Control) system - one that is simple, affordable, and expandable, to control model trains and accessories. Further, it is our goal that this project be organized, documented, and maintained so that it can continue far into the future.","title":"Our Mission"},{"location":"#what-is-dcc-ex","text":"In addition to controlling your trains, DCC++ also includes advanced features such as dedicated logic for operating turnouts, and the ability to create and control your own digital inputs, digital outputs, and even analog inputs --- great for reading panel switches, sensors, and occupancy detectors, as well as controlling servos, LEDS, and anything else you can imagine! Basically, DCC-EX can control anything using a DCC signal over two tracks, two wires, or via wired Ethernet or WiFi. A basic DCC++ EX system can use easy to find, widely avalable Arduino boards that you can plug in yourself. You may even have one sitting around in your project drawer! Or, you can use our FireBox Control Station for something that is just plug-and-play. DCC++ supports the full set of NMRA Digital Command and Control (DCC) standards , including: simultaneous control of multiple locomotives 2-byte and 4-byte locomotive addressing 128-step speed throttling Activate/de-activate all accessory function addresses 0-2048 Control of all cab functions F0-F28 Main Track: Write configuration variable bytes and set/clear specific configuration variable (CV) bits Programming Track: Same as the main track with the addition of reading configuration variable bytes","title":"What is DCC++ EX?"},{"location":"#whats-new-in-dcc-ex","text":"Complete support for all the old commands and front ends like JMRI Direct support for all the most popular motor control boards I2C Display support Improved short circuit detection and automatic reset from an overload Current reading, sensing and ACK detection settings in milliAmps instead of just pin readings Improved adherence to the NMRA DCC specification New Communication Manager to handle input and output to multiple sources simultaneously (JMRI, Cab controllers, etc.) Arduino Network Shield and ESP8266 WiFi support Railcom Cutout (Beta) Simpler, modular, faster code with an API Library for developers for easy expansion No more jumpers or soldering! (Beta) New features and functionsn in JMRI (coming) Automation (Alpha) NOTE: The Next release will be a major rewrite to the code. We started from scratch and are rebuilding from the ground up! For what that means to you, click HERE .","title":"What's new in DCC++ EX?"},{"location":"#the-system-consists-of-multiple-parts","text":"Command Station - An Arduino, motorboard and the DCC-EX uploadable firmware Controller - The JMRI Train Controlling and Decoder Programming Software Track Power Supply - A DC power supply to provide power to the rails Computer - You supply a laptop or other computer to run JMRI and connect via a USB cable to the Arduino DCC++ EX Software - The DCC++ EX sofware (called a \"sketch\") loaded onto the your command station There are many flavors and options to choose from. The DCC-EX system is incredibly expandable and adaptable. However, to keep it simple we will be covering a \"Starter System\" and providing you with a Quick Start guide to get you going. There is a more detailed User Manual for those who want to dig deeper and explore other options. The manual covers other motor control boards, other controllers, wireless communication options, current sensing options, using a Raspberry Pi instead of a laptop, and more. You aren't limited to just one or two choices and we've got you covered if you want to put together the perfect system for you.","title":"The system consists of multiple parts:"},{"location":"about/about-us/","text":"The DCC++ EX Project Who is behind all this? And will they ever face justice? Who knows, but the following is a list of those names associated with taking over the DCC++ Base Station Project and advancing it into the future. First, a special thanks to Gregg E. Berman who had the original idea for a model railroad Base Station using an Arduino Uno and a Motor Shield. If you want to read a short history of the project and what's changed over the years, click HERE (TODO - Create a link for this) What you see available for download here represents a complete rewrite of the code and the concept of what we (and what you tell us) DCC++ EX needs to be. You can seek us out here: TrainBoard DCC++ Forum Our Discord Server You can get support for DCC++ EX at either of the above links including live support on Discord. Names below in parenthesis are screen names on Trainboard and Discord Project Lead Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) DCC++ EX Lead Developers David Cutting - Park City, Utah, USA (David Cutting) Chris Harlow - Bournemouth UK (UKBloke) Developers Harald Barth Stockholm - Sweden (Haba) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Gregor Baues - \u00cele-de-France France (grbba) DCC++ Classic Lead Developers Mike Dunston - Sonora, California, USA (Atani) Fred Decker - Holly Springs, North Carolina USA (FlightRisk) Installer Software Lead Developers Anthony W - Dayton, Ohio USA (Dex, Dex++) Website Lead Developers Mani Kumar - Bangalor India (Mani / Mani Kumar) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Developers David Cutting - Park City, Utah, USA (David Cutting) Fred Decker - Holly Springs, North Carolina USA (FlightRisk) Documentation / Management Roger Beschizza - Dorset UK (Roger Beschizza) Keith Ledbetter - Chicago, Illinois USA (Keith Ledbetter) Kevin Smith - (KCSmith) Testing / Research / Support Sumner Patterson - Blanding, Utah, USA (Sumner) Larry Dribin - (H0Guy) Paul - Virginia USA (Paul1361) Gregor Baues - \u00cele-de-France France (grbba)","title":"Team"},{"location":"about/about-us/#the-dcc-ex-project","text":"Who is behind all this? And will they ever face justice? Who knows, but the following is a list of those names associated with taking over the DCC++ Base Station Project and advancing it into the future. First, a special thanks to Gregg E. Berman who had the original idea for a model railroad Base Station using an Arduino Uno and a Motor Shield. If you want to read a short history of the project and what's changed over the years, click HERE (TODO - Create a link for this) What you see available for download here represents a complete rewrite of the code and the concept of what we (and what you tell us) DCC++ EX needs to be. You can seek us out here: TrainBoard DCC++ Forum Our Discord Server You can get support for DCC++ EX at either of the above links including live support on Discord. Names below in parenthesis are screen names on Trainboard and Discord","title":"The DCC++ EX Project"},{"location":"about/about-us/#project-lead","text":"Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)","title":"Project Lead"},{"location":"about/about-us/#dcc-ex","text":"","title":"DCC++ EX"},{"location":"about/about-us/#lead-developers","text":"David Cutting - Park City, Utah, USA (David Cutting) Chris Harlow - Bournemouth UK (UKBloke)","title":"Lead Developers"},{"location":"about/about-us/#developers","text":"Harald Barth Stockholm - Sweden (Haba) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk) Gregor Baues - \u00cele-de-France France (grbba)","title":"Developers"},{"location":"about/about-us/#dcc-classic","text":"","title":"DCC++ Classic"},{"location":"about/about-us/#lead-developers_1","text":"Mike Dunston - Sonora, California, USA (Atani) Fred Decker - Holly Springs, North Carolina USA (FlightRisk)","title":"Lead Developers"},{"location":"about/about-us/#installer-software","text":"","title":"Installer Software"},{"location":"about/about-us/#lead-developers_2","text":"Anthony W - Dayton, Ohio USA (Dex, Dex++)","title":"Lead Developers"},{"location":"about/about-us/#website","text":"","title":"Website"},{"location":"about/about-us/#lead-developers_3","text":"Mani Kumar - Bangalor India (Mani / Mani Kumar) Fred Decker - Holly Springs, North Carolina, USA (FlightRisk)","title":"Lead Developers"},{"location":"about/about-us/#developers_1","text":"David Cutting - Park City, Utah, USA (David Cutting) Fred Decker - Holly Springs, North Carolina USA (FlightRisk)","title":"Developers"},{"location":"about/about-us/#documentation-management","text":"Roger Beschizza - Dorset UK (Roger Beschizza) Keith Ledbetter - Chicago, Illinois USA (Keith Ledbetter) Kevin Smith - (KCSmith)","title":"Documentation / Management"},{"location":"about/about-us/#testing-research-support","text":"Sumner Patterson - Blanding, Utah, USA (Sumner) Larry Dribin - (H0Guy) Paul - Virginia USA (Paul1361) Gregor Baues - \u00cele-de-France France (grbba)","title":"Testing / Research / Support"},{"location":"api/command-station-api/","text":"Command Station API The DCC++ EX System consists of a DCC++ Library and a Command Station program (or sketch in Arduino terms) that runs your Command Station. The library has its own application programming interface (API) that allows you to write your own version of a Command Station and to easily interface with DCC++ EX. The Command Station software itself uses the API functions to run your trains. Here is an example of how it works. Commands List General configuration and status functions getStatus() getPreamble() Waveform Control Functions setPower() setSignal() setBrake() NOTE: Work in progress. There are many more API functions","title":"Command Station"},{"location":"api/command-station-api/#command-station-api","text":"The DCC++ EX System consists of a DCC++ Library and a Command Station program (or sketch in Arduino terms) that runs your Command Station. The library has its own application programming interface (API) that allows you to write your own version of a Command Station and to easily interface with DCC++ EX. The Command Station software itself uses the API functions to run your trains. Here is an example of how it works.","title":"Command Station API"},{"location":"api/command-station-api/#commands-list","text":"","title":"Commands List"},{"location":"api/command-station-api/#general-configuration-and-status-functions","text":"getStatus() getPreamble()","title":"General configuration and status functions"},{"location":"api/command-station-api/#waveform-control-functions","text":"setPower() setSignal() setBrake() NOTE: Work in progress. There are many more API functions","title":"Waveform Control Functions"},{"location":"develop/base-station-dev/","text":"Base Station Development Work in progress","title":"Base Station"},{"location":"develop/base-station-dev/#base-station-development","text":"Work in progress","title":"Base Station Development"},{"location":"download/dccex-downloads/","text":"Download DCC++ EX Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option. Automated DCC++ EX / DCC++ Classic Installer Automated Installer Clicking above will download the DCC-EX installer for your OS. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board. Latest DCC++ EX Release Download Zip DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board. DCC++ EX GitHub Repository DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment. The Original \"Classic\" version The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. Note This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"DCC++ Basestation"},{"location":"download/dccex-downloads/#download-dcc-ex","text":"Welcome to the DCC++ EX download page. You have several choices depending on what you want to do with DCC-EX. I you aren't a programmer, or a tinkerer, or you just want to installer to do the work for you, choose the installer download. If you want to download a zip file, extract the files and use the Arduino IDE to install the firmware onto your board, choose one of the options below. If you are a developer and want to install the software into a repository on your computer, select the GitHub Repository option.","title":"Download DCC++ EX"},{"location":"download/dccex-downloads/#automated-dcc-ex-dcc-classic-installer","text":"Automated Installer Clicking above will download the DCC-EX installer for your OS. You will have the opportunity to select either DCC++ \"Classic\" or the new DCC++ EX. The installer will let you select options, such as your Arduino board type, motor shield/motor controller, and COM port and then automatically compile the firmware and upload it to your Arduino or compatible board.","title":"Automated DCC++ EX / DCC++ Classic Installer"},{"location":"download/dccex-downloads/#latest-dcc-ex-release-download-zip","text":"DCC++ EX Download Zip Clicking above will immediately download a zip file containing the Arduino Sketch file for DCC++ EX. You will need either the Arduino IDE (found here) or the PlatformIO development environment (found here) in order to upload it to your microcontroller board.","title":"Latest DCC++ EX Release Download Zip"},{"location":"download/dccex-downloads/#dcc-ex-github-repository","text":"DCC++ EX GitHub Repository Clicking above will take you the the DCC++ EX GitHub repository where you can download the project as a Zip file or Clone it to your own respository. All of the source files and instructions for how to contribute to the project can be found in the repository. We have made sure that you can still use the Arduino IDE if you like, but we recommend devlopers use the PlaformIO development environment.","title":"DCC++ EX GitHub Repository"},{"location":"download/dccex-downloads/#the-original-classic-version","text":"The installer at the top of the page will give you the choice of either version. We recommend using the newer DCC++ EX version. But if you are looking for the original source for the project (with some minor bug fixes and improvements), click the links below. Note This version is not actively maintained and will only be updated with bug fixes. Last DCC++ Classic Release Download Zip DCC++ Classic GitHub Repository","title":"The Original \"Classic\" version"},{"location":"download/dccex-materials-downloads/","text":"Download DCC++ EX Materials Work in progress","title":"Materials"},{"location":"download/dccex-materials-downloads/#download-dcc-ex-materials","text":"Work in progress","title":"Download DCC++ EX Materials"},{"location":"hardware/i2c-displays/","text":"I2C Displays DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display.","title":"I2C Displays"},{"location":"hardware/i2c-displays/#i2c-displays","text":"DCC++ EX is designed to accommodate a display. You don't need a display since the Control Station is often hidden away under the layout. However, if you like the idea of a nice visual display for your panel, just about any I2C (serial to parallel interface) display will work. We recommend either a 20 character by 2 line or 4 line display. The code is easily configurable in order to change the display settings, as well as add or change what is printed on the display.","title":"I2C Displays"},{"location":"hardware/microcontrollers/","text":"Microcontrollers DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/microcontrollers/#microcontrollers","text":"DCC++ EX is compatible with many Arduino microcontollers. Out of the box, EX will work by making one selection: Arduino Uno Arduino Mega Arduino Nano We recommend the Mega board since it is inexpensive (you can buy clone boards for under $10 US), it has a lot more GPIO (General Purpose Input/Output) pins so you can expand and connect more sensors, turnouts, leds and accessories, and it has more memory. If you intend to add options like neworking, an I2C Display or anything that adds to the size of the program, you may need the extra memory. And here is an Elegoo version:","title":"Microcontrollers"},{"location":"hardware/motor-boards/","text":"Motor boards There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\", some require a little work, but others are mostly plug and play. NOTE: We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US). Boards currently supported Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section. Connecting an Arduino or Deek-Robot Motor Shield Jumper Diagrams The link above will open a PDF document that provides detail information on how to connect the most popular motor controllers to an Arduino.","title":"Motor Boards"},{"location":"hardware/motor-boards/#motor-boards","text":"There are many motor boards available to use with DCC++ EX. Also called \"Dual-H Bridges\" and \"Motor Shields\", some require a little work, but others are mostly plug and play. NOTE: We recommend the Arduino Motor Shield R3 or a supported clone board like the Deek-Robot ($15 US).","title":"Motor boards"},{"location":"hardware/motor-boards/#boards-currently-supported","text":"Arduino Motor Shield R3 Deek-Robot Motor Shield LMD18200 Motor Driver Module Pololu MC33926 Motor Shield LMD18200 Based Motor Boards There are other boards, some requiring modification, which are covered in the advanced section.","title":"Boards currently supported"},{"location":"hardware/motor-boards/#connecting-an-arduino-or-deek-robot-motor-shield","text":"Jumper Diagrams The link above will open a PDF document that provides detail information on how to connect the most popular motor controllers to an Arduino.","title":"Connecting an Arduino or Deek-Robot Motor Shield"},{"location":"hardware/power-supplies/","text":"Power Supplies The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers. Voltage N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages at this Trainboard Thread Another good link (along with just about anything written by Mark Gurries, is here: Mark Gurries - Choosing the Right Booster Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system. Amperage You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply. Recommended Power Supplies Wall warts are a good choice for beginners and those not comfortable with mains wiring. You can get a 12V, 3A, relatively small one for around $8 US. You can also find plenty of laptop type \"brick\" power supplies. They come in ranges from 12V to 18V and 3-5 Amps. The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is an inexpensive and solid option. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005 You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS.","title":"Power Supplies"},{"location":"hardware/power-supplies/#power-supplies","text":"The power supply is one of the most important parts of your setup. You need to select a clean, filtered power supply that can supply at least the amount of current required by your motor drivers.","title":"Power Supplies"},{"location":"hardware/power-supplies/#voltage","text":"N and Z scale layouts should run at at about 12V to avoid damage to the motors. See this thread to learn more about the pros and cons of running at higher voltages at this Trainboard Thread Another good link (along with just about anything written by Mark Gurries, is here: Mark Gurries - Choosing the Right Booster Most larger scales will run higher voltages. For reference, the Digitrax systems put the rails at around 14V. Do some homework to determine what voltage is best for your system.","title":"Voltage"},{"location":"hardware/power-supplies/#amperage","text":"You'll need to be able to supply 3A per channel to the tracks on which you intend to run trains, assuming you're using the Arduino motor shield or Pololu motor shield. For larger motor driver shields, you'll want a larger power supply.","title":"Amperage"},{"location":"hardware/power-supplies/#recommended-power-supplies","text":"Wall warts are a good choice for beginners and those not comfortable with mains wiring. You can get a 12V, 3A, relatively small one for around $8 US. You can also find plenty of laptop type \"brick\" power supplies. They come in ranges from 12V to 18V and 3-5 Amps. The Meanwell LRS-100-15 power supply is a good choice for larger scales. It supplies 15V and 105W (that's 7 amps), so it is plenty for running two channels simutaneously. At only $18, it is an inexpensive and solid option. https://www.digikey.com/product-detail/en/mean-well-usa-inc/LRS-100-15/1866-3313-ND/7705005 You'll need to do your own mains wiring, if you don't have experience with this get a friend who does or hire an electrician to do it for you. MAINS POWER IS DANGEROUS.","title":"Recommended Power Supplies"},{"location":"notes/rewrite/","text":"What's New for the DCC++ EX Project Everything you loved is still there First, we want to stress that we didn't break anything! Whether you are using JMRI as a front end to send commands to your track, handle turnouts or read and write CVs, or any using any other software or the serial monitor, the commands are still the same. We have expanded the API (Application Programming Interface) to add new commands and provide new responses, but they won't affect your old control methods. One example of a new command is the one to handle turning power on and off to individual tracks. DCC++ EX is all new! While we made minor changes to the original DCC++ \"Classic\", all new development in going forward with DCC++ EX. At first, we expanded features, added functionality and fixed bugs by working from the existing code base. The first release of DCC++ will be familiar to any of you who played with the code. However, we want to stress that the next release, the one that is in Beta testing now, is a complete re-write fromt he ground up. What's different? We started with the DCC Signal Generation code, what we call the \"Waveform Generator. We got together as a team and looked at how we could make it better. It soon became clear that rather than make piecemeal changes, the entire concept of how the signal could be generated and how to use timers and interrupts would need to be re-thought. Next we focused on packet generation. We looked at the complexities of reading and maintaining code that was using binary math, multiple \"registers\" to hold train data, and doing bit shifting everywhere to build bytes and stuff them into data packets. The new method gets rid of the old registers and simplifies the whole structure for building packets. Things like start and stop bits and preamble bits are static pieces of information. Do being able to just insert them where they need to go saves time and processor bandwidth. We created an internal API for how modules communicated with each other. So the code is more modular and each unit is dedicated to its specific task. We completely re-wrote current sense and ACK detect routines. We created an automation scripting language called TPL (Train Programming Language) Why did we do this? We needed a platform that would allow us to grow into the future. The first thing we found was that in order to allow easy changes and to be able to adapt to technology we might want to use going forward, the code needed to be more modular. Each unit needed to be a \"black box\" that either did just one task and do it well, or take input and generate output without having to know anything about the module it was communiating with. Therefore, we created an interal API through which the modules could communicate. By simply unplugging one unit and plugging in another we could continue to work using a differnt devices. An example of this is input and output. It doesn't matter whether JMRI is sending commands to DCC++ EX or if it is a wireless Cab Controller. It doesn't matter if the output device is the serial monitor or an I2C display. It doesn't matter if you want to use a serial port or a network device to route data. This makes it very easy to implement new features with new devices. We just have to create a small interface for whatever new device we want to implement. This has the side benefit of allowing the code to be more readable. Next, the Waveform Generator needed 2 intetimers and interrupts, one for the Main track signal and one for the Programming track. The Uno only has 3 timers. So 2 of them were already tied up for sending the DCC signal. Since the programming track sits idle most of the time, and both signals were always being generated to the input of the motor board, processing power was being wasted that could be put to use for something else. In addition, because of the way the Arduino is designed, we were forced to use jumpers to connect pins on the Arduino to those on the motor board. Our new design eliminates the need for jumpers! The packet generation routine was complex, hard to maintain, and limited us with regard to the hardware we could run on and new features we could implement (like the Railcom cut-out_. We replaced the slow DigitalRead() and DigitalWrite() routines with a fast write library. The packet generation is now streamlined, fast (which allows us to be able to use on only 1 timer to create signals for 2 tracks) and much easier to read. The 3 most requested features were: 1. More reliable CV read and writes, 2. Railcom cut-out, 3. Automation. We haven't limited ourselves to just these features, but we put a lot of time into redesigning things to accomodate them. The current detection routines are completely different. One key difference is all current readings is in milliAmps instead of meaningless pin readings. So if you want to set your overload protection to kick in at 3 Amps, you just enter 3000 for 3000 milliAmps instead of looking up a value from a table. We are still testing all the motorboard and Arduino combinations at different voltages to refine our current readings. This is important because we want to have accurate and fast short-circuit detection, and because the reason CV reading was occasionally unreliable in the past was due to not always sensing a current pulse on the track. In addition to more accurately reading current, we had to completely change the way we look for an \"ACK\" (acknowledgement from the train that it received a command). So we now check immedately after we send a command instead of waiting for a dozen or more packets. This means we don't miss an ACK while this is happening and we jump out of sending uneccessary packes as soon as we get one. You will appreciate how much faster we can read CVs now! We not only have created a rail-com cutout within the Command Station, but are looking at actually reading the Railcom data and reporting it. We may require the use of a Mega instead of an Uno for this feature. TPL brings new capability to the world of automation. You don't have to be a programmer to write a script that tells a train to start moving forward at a set speed until some action (like reaching a sensor) occurs. We will be providing a document and tutorial on TPL once Beta testing is complete. This will be an open-ended project since who knows what people will come up with they want to automate. It will be easy to extend the commands to handle whatever your imagination can dream of. The bottom line So while maintaining proper deference to Gregg Bermann's original concept of an inexpensive Control Station based on the Arduino platform, we don't want to do a disservice to DCC++ EX or develpers like Chris Harlow (UkBloke) and David Codding (David Codding) who brought a new vision to the project and who used very little of the original code. This is NOT DCC++ v2.0, this is a completely new, yet API and feature compatible Control Station. And just a tease: What Constrol Station would be complete without a wireless Cab Controller that speaks DCC++? Keep looking at our web page for new announcments. Thanks This is a team effort. There are a dedicated and organize group of about 15-20 core people involved in the project. In addition, there is all of you who contribute with your comments, feature ideas, evangelizing and testing. So we give you our heartfelt thanks. We will see you online! Click here for The DCC++ EX Team Credits","title":"What's New"},{"location":"notes/rewrite/#whats-new-for-the-dcc-ex-project","text":"","title":"What's New for the DCC++ EX Project"},{"location":"notes/rewrite/#everything-you-loved-is-still-there","text":"First, we want to stress that we didn't break anything! Whether you are using JMRI as a front end to send commands to your track, handle turnouts or read and write CVs, or any using any other software or the serial monitor, the commands are still the same. We have expanded the API (Application Programming Interface) to add new commands and provide new responses, but they won't affect your old control methods. One example of a new command is the one to handle turning power on and off to individual tracks.","title":"Everything you loved is still there"},{"location":"notes/rewrite/#dcc-ex-is-all-new","text":"While we made minor changes to the original DCC++ \"Classic\", all new development in going forward with DCC++ EX. At first, we expanded features, added functionality and fixed bugs by working from the existing code base. The first release of DCC++ will be familiar to any of you who played with the code. However, we want to stress that the next release, the one that is in Beta testing now, is a complete re-write fromt he ground up.","title":"DCC++ EX is all new!"},{"location":"notes/rewrite/#whats-different","text":"We started with the DCC Signal Generation code, what we call the \"Waveform Generator. We got together as a team and looked at how we could make it better. It soon became clear that rather than make piecemeal changes, the entire concept of how the signal could be generated and how to use timers and interrupts would need to be re-thought. Next we focused on packet generation. We looked at the complexities of reading and maintaining code that was using binary math, multiple \"registers\" to hold train data, and doing bit shifting everywhere to build bytes and stuff them into data packets. The new method gets rid of the old registers and simplifies the whole structure for building packets. Things like start and stop bits and preamble bits are static pieces of information. Do being able to just insert them where they need to go saves time and processor bandwidth. We created an internal API for how modules communicated with each other. So the code is more modular and each unit is dedicated to its specific task. We completely re-wrote current sense and ACK detect routines. We created an automation scripting language called TPL (Train Programming Language)","title":"What's different?"},{"location":"notes/rewrite/#why-did-we-do-this","text":"We needed a platform that would allow us to grow into the future. The first thing we found was that in order to allow easy changes and to be able to adapt to technology we might want to use going forward, the code needed to be more modular. Each unit needed to be a \"black box\" that either did just one task and do it well, or take input and generate output without having to know anything about the module it was communiating with. Therefore, we created an interal API through which the modules could communicate. By simply unplugging one unit and plugging in another we could continue to work using a differnt devices. An example of this is input and output. It doesn't matter whether JMRI is sending commands to DCC++ EX or if it is a wireless Cab Controller. It doesn't matter if the output device is the serial monitor or an I2C display. It doesn't matter if you want to use a serial port or a network device to route data. This makes it very easy to implement new features with new devices. We just have to create a small interface for whatever new device we want to implement. This has the side benefit of allowing the code to be more readable. Next, the Waveform Generator needed 2 intetimers and interrupts, one for the Main track signal and one for the Programming track. The Uno only has 3 timers. So 2 of them were already tied up for sending the DCC signal. Since the programming track sits idle most of the time, and both signals were always being generated to the input of the motor board, processing power was being wasted that could be put to use for something else. In addition, because of the way the Arduino is designed, we were forced to use jumpers to connect pins on the Arduino to those on the motor board. Our new design eliminates the need for jumpers! The packet generation routine was complex, hard to maintain, and limited us with regard to the hardware we could run on and new features we could implement (like the Railcom cut-out_. We replaced the slow DigitalRead() and DigitalWrite() routines with a fast write library. The packet generation is now streamlined, fast (which allows us to be able to use on only 1 timer to create signals for 2 tracks) and much easier to read. The 3 most requested features were: 1. More reliable CV read and writes, 2. Railcom cut-out, 3. Automation. We haven't limited ourselves to just these features, but we put a lot of time into redesigning things to accomodate them. The current detection routines are completely different. One key difference is all current readings is in milliAmps instead of meaningless pin readings. So if you want to set your overload protection to kick in at 3 Amps, you just enter 3000 for 3000 milliAmps instead of looking up a value from a table. We are still testing all the motorboard and Arduino combinations at different voltages to refine our current readings. This is important because we want to have accurate and fast short-circuit detection, and because the reason CV reading was occasionally unreliable in the past was due to not always sensing a current pulse on the track. In addition to more accurately reading current, we had to completely change the way we look for an \"ACK\" (acknowledgement from the train that it received a command). So we now check immedately after we send a command instead of waiting for a dozen or more packets. This means we don't miss an ACK while this is happening and we jump out of sending uneccessary packes as soon as we get one. You will appreciate how much faster we can read CVs now! We not only have created a rail-com cutout within the Command Station, but are looking at actually reading the Railcom data and reporting it. We may require the use of a Mega instead of an Uno for this feature. TPL brings new capability to the world of automation. You don't have to be a programmer to write a script that tells a train to start moving forward at a set speed until some action (like reaching a sensor) occurs. We will be providing a document and tutorial on TPL once Beta testing is complete. This will be an open-ended project since who knows what people will come up with they want to automate. It will be easy to extend the commands to handle whatever your imagination can dream of.","title":"Why did we do this?"},{"location":"notes/rewrite/#the-bottom-line","text":"So while maintaining proper deference to Gregg Bermann's original concept of an inexpensive Control Station based on the Arduino platform, we don't want to do a disservice to DCC++ EX or develpers like Chris Harlow (UkBloke) and David Codding (David Codding) who brought a new vision to the project and who used very little of the original code. This is NOT DCC++ v2.0, this is a completely new, yet API and feature compatible Control Station. And just a tease: What Constrol Station would be complete without a wireless Cab Controller that speaks DCC++? Keep looking at our web page for new announcments.","title":"The bottom line"},{"location":"notes/rewrite/#thanks","text":"This is a team effort. There are a dedicated and organize group of about 15-20 core people involved in the project. In addition, there is all of you who contribute with your comments, feature ideas, evangelizing and testing. So we give you our heartfelt thanks. We will see you online! Click here for The DCC++ EX Team Credits","title":"Thanks"},{"location":"resources/resources/","text":"Resources Work in progress","title":"Resources"},{"location":"resources/resources/#resources","text":"Work in progress","title":"Resources"},{"location":"start/assembly/","text":"Assembly Let's start with the basics and add as you see fit. For this install, you need the following: An Arduino Mega or compatible An Arduino Motor Control Board or compatible A USB-A Male to USB-B Male cable, aka USB Printer cable (or Micro USB for some Arduino Mega clones) 18 to 16 AWG twisted pair hookup wire to connect the CS (Motor Controller outputs) to your tracks A 7-9V DC Power supply with a 2.5mm barrel connector for the Mega A 12V-15V power supply for the Motor Shield (See fig for proper voltage) A 2.5mm x 5.5mm Female DC Plug to Screw Terminal (if you don't want to strip wires on your power supply) figure 1 - basic setup For an Uno, Nano or other microcontroller, or if you wish to use a different motor controller (for example to have more current to operate more trains and accesories), see link coming soon For a video on how to do this, click here link coming soon 1. BEFORE YOU BEGIN, Cut the Vin trace on the motor controller We recommend you use two separate power supplies (or one power supply that can deliver two different voltages) one for the Arduino Mega and the other for the Motor Controller to power your tracks. You will need to turn the motor controller board upside down and cut the trace indicated in the picture with a razor blade or x-acto knife. 2 or 3 firm scratches through the trace should do it. Do not cut too deep. Both a magifier and an ohmmeter would be helpful here. The little vertical line in between the two solder pads is the scratch mark from where we cut through the little solder trace. By default, the motor controller connects its power supply via the pins, to the Arduino. This can supply two much voltage to the Arduino. If you do not cut this trace, you could damage the Arduino Mega if you either apply more than 12V to the motor shield, or use the 2 power supplies as recommended. figure 2 - Cutting the Vin trace If you have an ohmmeter, touch your probes to each side of the trace pads and make sure the reading is infinite. In other words, make sure the trace is cut and there is no longer continuity between the two pads on the trace. 2. You need to connect the motor shield on top of the Arduino. NOTE: It is very easy to misalign the pins and then either have trouble diagnosing problems or damage the board! Here are some tips: There are power connectors on both boards. They must point in the same direction There are outdented \"tabs\" on the opposite end of the board. They must point in the same direction. The pin numbers on both boards must align (pin 1 goes to pin 1, gnd goes to gnd, etc) With the power connectors to your right, align the pins facing you first (pins 0-12, aref, gnd, etc.) Look at the pins on the motorboard and make sure they are all straight and line up in a neat row Place both boards on the table with the power connector end facing in the same direction Figure 3 - Properly orient the boards a. Did you remember to cut the trace on the motor shield? If not, see above. Otherwise, sight down both rows of pins on the motor board and make sure they are all straight. They should all light up in a row and not be bent in any plane just like the teeth on a comb. b. Line up the pins on the side of the board closes to the USB with the header connector on the Mega first. You want to line up pins 0-12,gnd, aref, and the last two pins on the Mega with the same pins on the motor board. c. Just align them and start to push them in but don't push them all the way in. Use your fingers to try to push the pins to get them to all to into the holes. d. Do the same on the other side. Get all the pins aligned and start to press gently to get them into the holes. e. Now, being careful to not bend any pins gently press, using a rocking motion if you need to, in order to get the motor board to seat firmly onto the Mega. NOTE: The pins will stop leaving a small space between the bottom of the motorboard and the top of the black plastic headers on the Mega. This is normal, you should see a little bit of the pins in between the two boards. Don't force anything. 3. Connect your power supply to the motor shield (But don't plug it in yet!) WARNING : Make sure you have cut the trace on the motor control board. If not, see above first. Once you know the trace is cut, connect power to the motor board Make sure you have a power supply with the correct voltage and current rating. If you are using a metal box type power supply, simply connect the DC output of the power supply to the DC input of the motor shield. Make sure that the positive screw terminal (+) is connected to the positive terminal (Vin) of the motor shield and the negative terminal (- or gnd) is connected to the negative terminal of the motor shield If you are using a laptop style \"brick\" power supply, use the barrel connector to screw terminal adapter to connect your power supply to the Vin and ground pins on the motor shield. Be careful to use the correct polarity. Make sure the positive terminal on the screw terminal adapter connects to the positive (+) on the motor shiel and the negative terminal (- or gnd) connects to the negative terminal. If you don't have a screw terminal adapter, you can cut the end off your power supply and strip the wires. The outer wire braid is the negative connection and the center wire is the positive connection. 4. Connect the power wires to the tracks There are two sets of output connectors on the motor shield, \"A\" and \"B\". A is the main or operations (also called \"Ops\") track while B is the programming or service track. Connect twisted pair wire of the proper guage to each track. Polarity it non important here, but if you will be using a siding track instead of a separate, unused piece of track, make sure that the positive and negative for both tracks match. In other words, if you view one side of your main track as having a \"left\" side and a right side, and connect positive of output A to the left side, connect the positive from the B side to the left side of the programming track. In electrical terms, we want both tracks to be \"in phase\" with each other. 5. Connect the power supply to the arduino (but )don't plug it in yet!) Connect the 2.5mm barrel connect from your separate 7-9V DC powersupply to the barrel connector on the Arduino 12. Use the Arduino IDE Serial Monitor here? 6. Download and install the DCC++ EX Software for your Command Station Keep your USB cable handy because we are going to need it in the next step. Click on one of the links below to see how to install the software. If you are a \"Conductor\" (Click to see user levels / path choice ), we recommend using our installer. It is the simplest and quickest way to get started since it walks you through a simple process by letting you select any options from simple dropdowns and then installs everything you need. If you are a \"Tinkerer\" or \"Engineer\", you may prefer using the Arduino IDE. Many of you may have already used the Arduino IDE and be familiar with it. The Arduino IDE is a very simple \"Integrated Development Environment\" that lets you open the DCC-EX project files, edit your config file or even your main program file, upload it to the Arduino, and then monitor or interact with the Command Station for testing. TECHNICAL NOTES Wire Guage - The Arduino Motor controller can only provide about 1.5 Amps of power (despite being rated for 2), so 18 AWG wire is ample. If you use a different motor controller and deliver more current to your track, you may need thicker wire. Power Supplies - Why do we recommend a 7-9V power supply for the Mega when the manaual says it can handle 12V? Can't you just use one 12V power supply to power both of them? Short answer; NO. You want two supplies (or one supply that splits out 2 voltages). The Arduino Mega only needs around 7V to operate. Any voltage over that is wasted as heat and can burn out the regulator on the board. And most people want a minimum of 12V into the Motor Board, many want up to 14 (for N and HO Scale). Where your Mega could run hot for a while with 12V, if 14V from the Motorboard was connected to the Mega, it would destroy it. Cut the trace and use 2 power supplies. Install using the Automated Installer Install manually using the Arduino IDE Power Supplies Next Page: Basic Install/Setup","title":"Hardware & Assembly"},{"location":"start/assembly/#assembly","text":"Let's start with the basics and add as you see fit. For this install, you need the following: An Arduino Mega or compatible An Arduino Motor Control Board or compatible A USB-A Male to USB-B Male cable, aka USB Printer cable (or Micro USB for some Arduino Mega clones) 18 to 16 AWG twisted pair hookup wire to connect the CS (Motor Controller outputs) to your tracks A 7-9V DC Power supply with a 2.5mm barrel connector for the Mega A 12V-15V power supply for the Motor Shield (See fig for proper voltage) A 2.5mm x 5.5mm Female DC Plug to Screw Terminal (if you don't want to strip wires on your power supply) figure 1 - basic setup For an Uno, Nano or other microcontroller, or if you wish to use a different motor controller (for example to have more current to operate more trains and accesories), see link coming soon For a video on how to do this, click here link coming soon","title":"Assembly"},{"location":"start/assembly/#1-before-you-begin-cut-the-vin-trace-on-the-motor-controller","text":"We recommend you use two separate power supplies (or one power supply that can deliver two different voltages) one for the Arduino Mega and the other for the Motor Controller to power your tracks. You will need to turn the motor controller board upside down and cut the trace indicated in the picture with a razor blade or x-acto knife. 2 or 3 firm scratches through the trace should do it. Do not cut too deep. Both a magifier and an ohmmeter would be helpful here. The little vertical line in between the two solder pads is the scratch mark from where we cut through the little solder trace. By default, the motor controller connects its power supply via the pins, to the Arduino. This can supply two much voltage to the Arduino. If you do not cut this trace, you could damage the Arduino Mega if you either apply more than 12V to the motor shield, or use the 2 power supplies as recommended. figure 2 - Cutting the Vin trace If you have an ohmmeter, touch your probes to each side of the trace pads and make sure the reading is infinite. In other words, make sure the trace is cut and there is no longer continuity between the two pads on the trace.","title":"1. BEFORE YOU BEGIN, Cut the Vin trace on the motor controller"},{"location":"start/assembly/#2-you-need-to-connect-the-motor-shield-on-top-of-the-arduino","text":"NOTE: It is very easy to misalign the pins and then either have trouble diagnosing problems or damage the board! Here are some tips: There are power connectors on both boards. They must point in the same direction There are outdented \"tabs\" on the opposite end of the board. They must point in the same direction. The pin numbers on both boards must align (pin 1 goes to pin 1, gnd goes to gnd, etc) With the power connectors to your right, align the pins facing you first (pins 0-12, aref, gnd, etc.) Look at the pins on the motorboard and make sure they are all straight and line up in a neat row Place both boards on the table with the power connector end facing in the same direction Figure 3 - Properly orient the boards a. Did you remember to cut the trace on the motor shield? If not, see above. Otherwise, sight down both rows of pins on the motor board and make sure they are all straight. They should all light up in a row and not be bent in any plane just like the teeth on a comb. b. Line up the pins on the side of the board closes to the USB with the header connector on the Mega first. You want to line up pins 0-12,gnd, aref, and the last two pins on the Mega with the same pins on the motor board. c. Just align them and start to push them in but don't push them all the way in. Use your fingers to try to push the pins to get them to all to into the holes. d. Do the same on the other side. Get all the pins aligned and start to press gently to get them into the holes. e. Now, being careful to not bend any pins gently press, using a rocking motion if you need to, in order to get the motor board to seat firmly onto the Mega. NOTE: The pins will stop leaving a small space between the bottom of the motorboard and the top of the black plastic headers on the Mega. This is normal, you should see a little bit of the pins in between the two boards. Don't force anything.","title":"2. You need to connect the motor shield on top of the Arduino."},{"location":"start/assembly/#3-connect-your-power-supply-to-the-motor-shield-but-dont-plug-it-in-yet","text":"WARNING : Make sure you have cut the trace on the motor control board. If not, see above first. Once you know the trace is cut, connect power to the motor board Make sure you have a power supply with the correct voltage and current rating. If you are using a metal box type power supply, simply connect the DC output of the power supply to the DC input of the motor shield. Make sure that the positive screw terminal (+) is connected to the positive terminal (Vin) of the motor shield and the negative terminal (- or gnd) is connected to the negative terminal of the motor shield If you are using a laptop style \"brick\" power supply, use the barrel connector to screw terminal adapter to connect your power supply to the Vin and ground pins on the motor shield. Be careful to use the correct polarity. Make sure the positive terminal on the screw terminal adapter connects to the positive (+) on the motor shiel and the negative terminal (- or gnd) connects to the negative terminal. If you don't have a screw terminal adapter, you can cut the end off your power supply and strip the wires. The outer wire braid is the negative connection and the center wire is the positive connection.","title":"3. Connect your power supply to the motor shield (But don't plug it in yet!)"},{"location":"start/assembly/#4-connect-the-power-wires-to-the-tracks","text":"There are two sets of output connectors on the motor shield, \"A\" and \"B\". A is the main or operations (also called \"Ops\") track while B is the programming or service track. Connect twisted pair wire of the proper guage to each track. Polarity it non important here, but if you will be using a siding track instead of a separate, unused piece of track, make sure that the positive and negative for both tracks match. In other words, if you view one side of your main track as having a \"left\" side and a right side, and connect positive of output A to the left side, connect the positive from the B side to the left side of the programming track. In electrical terms, we want both tracks to be \"in phase\" with each other.","title":"4. Connect the power wires to the tracks"},{"location":"start/assembly/#5-connect-the-power-supply-to-the-arduino-but-dont-plug-it-in-yet","text":"Connect the 2.5mm barrel connect from your separate 7-9V DC powersupply to the barrel connector on the Arduino 12. Use the Arduino IDE Serial Monitor here?","title":"5. Connect the power supply to the arduino (but )don't plug it in yet!)"},{"location":"start/assembly/#6-download-and-install-the-dcc-ex-software-for-your-command-station","text":"Keep your USB cable handy because we are going to need it in the next step. Click on one of the links below to see how to install the software. If you are a \"Conductor\" (Click to see user levels / path choice ), we recommend using our installer. It is the simplest and quickest way to get started since it walks you through a simple process by letting you select any options from simple dropdowns and then installs everything you need. If you are a \"Tinkerer\" or \"Engineer\", you may prefer using the Arduino IDE. Many of you may have already used the Arduino IDE and be familiar with it. The Arduino IDE is a very simple \"Integrated Development Environment\" that lets you open the DCC-EX project files, edit your config file or even your main program file, upload it to the Arduino, and then monitor or interact with the Command Station for testing.","title":"6. Download and install the DCC++ EX Software for your Command Station"},{"location":"start/assembly/#technical-notes","text":"Wire Guage - The Arduino Motor controller can only provide about 1.5 Amps of power (despite being rated for 2), so 18 AWG wire is ample. If you use a different motor controller and deliver more current to your track, you may need thicker wire. Power Supplies - Why do we recommend a 7-9V power supply for the Mega when the manaual says it can handle 12V? Can't you just use one 12V power supply to power both of them? Short answer; NO. You want two supplies (or one supply that splits out 2 voltages). The Arduino Mega only needs around 7V to operate. Any voltage over that is wasted as heat and can burn out the regulator on the board. And most people want a minimum of 12V into the Motor Board, many want up to 14 (for N and HO Scale). Where your Mega could run hot for a while with 12V, if 14V from the Motorboard was connected to the Mega, it would destroy it. Cut the trace and use 2 power supplies. Install using the Automated Installer Install manually using the Arduino IDE Power Supplies Next Page: Basic Install/Setup","title":"TECHNICAL NOTES"},{"location":"start/automation/","text":"Automation Work in progress","title":"Automation"},{"location":"start/automation/#automation","text":"Work in progress","title":"Automation"},{"location":"start/basic-setup/","text":"Basic Setup using the Arduino IDE The Arduino IDE is an \"Integrated Development Environment\". Don't let the name scare you away from giving it a try, it is really just a program that lets you open a project, like our DCC++ EX Software files, compile them into instructions the Arduino understands, and uploads them from your computer into the Arduino using a serial cable. It is extremely easy to use. If you are a Tinkerer or an Engineer (See levels/path choice ), You may want to make changes to the code or just learn more about how the Command Station software works. At a minimum, you may need to change options in the config file or use the IDE's \"Serial Monitor\" to monitor your CS, get logs if somethign if something is not working, or enter commands to test out features. Download and install the Arduino IDE Rather than go into details that are already covered in great detail on the Arduino web page, just follow the instructions in the following link and then return here. Arduino IDE Guide Download the DCC++ EX zip file Use the link to either the zip file or at the botom of our Github page here: DCC++ EX Download Page Unzip the file into the Arduino IDE project folder Find the location to where you downloaded the zip file (usually the \"downloads\" folder) on your computer and unzip it to the Arduino projects folder, called the \"sketchbook folder\". Arduino likes to call \"programs\" \"sketches\". The default name of the Sketchbook folder is \u201cArduino\u201d and the default location of the Sketchbook folder is in the \u201cMy Documents\u201d folder (or just \u201cDocuments\u201d for Mac users). Make sure the path is correct. You should now have a <documents/arduino/CommandStation-EX> folder with the entire DCC-EX project inside it. Copy the config.example.h file or rename it DCC-EX provides you with an example configuration file. This file holds settings that you can change for things like your choice of motor controller, Wifi login credentials, etc. Rather than a future update potentially have you lose any changes you make to your configuration, we give this file a different name and leave it up to you to edit if you need to. Therefore, copy this file and name it's clone \"config.h\" or simply rename this file to \"config.h\". Run the Arduino IDE Program Find the Arduino IDE program on your Start Menu/Mac Finder, etc. and open the application. You will see this screen: Open the CommandStation-EX Project Choose \"File -> Open\" from the menu and then click on the \"CommandStation-EX\" sketch folder to open it. Scroll down to the \"CommandStation.ino\" file (It should have the round, blue Arduino logo on it) and open that file. We also provide example .ino files for those Tinkerers or Engineers who want to use optional features like the \"User Command Override\" feature, high current motor boards, etc. But for now, and for most users, this will be all you need. Install the DIO2.h Library From the \"Tools\" menu, select \"Lirary Manager\". It may take a few seconds for it to load the list of all the libraries. Libraries are shared pieces of code that can be used by sketches to add functionality without someone having to write them from scratch. Type \"DIO2\" into the search box. You should then see a box below with \"DIO2\" by Thierry Paris of Locduino. Click \"Install\" to install this library. After it installs, close the libary manger window and go back to the main window. Edit the config.h file (optional) If you are using the standard Arduino Motor Shield and if optionally using one of the supported Wifi boards and want to connect directly to the Command Station in Access Point Mode (AP) from your WiFi controller , there is nothing to do! Just upload the software to the Command Station in the next step. If you are using a different motor shield or motor controller board or if you wish to connect your CS to your home network instead of having a separate access point, click here for more detailed instructions on how to edit your config.h file If you want to take a look at this file or make a simple change, just open the file and take a look. You should see many files open in tabs at the top of the IDE Window. Find the down facinng triangle near the upper right of the window and click on it to open the entire list of files. Scroll down to near the bottom and click on the \"config.h\" file you renamed in the previous step to open it in the editing window. If you are sure of your changes, make sure to click on \"file -> save\" from the top menu to save them. Select the board type and com port Before you attempt this step, make sure that you have everything connected properly from the . And a final reminder to make sure you cut the Vin trace on the bottom of the Arduino Motor Shield. Ready? Then proceed. Connect the computer to the Arduino with the USB cable. Note the 5V coming from your computer/raspberry Pi is enough to power the Mega temporarily since it bypasses the regulator that converts your 7-9V power supply down to 5V and goes right to the 5V bus on the board. So don't be alarmed by lights on your Arduino. From the \"tools\" menu select the \"board\" menu, then \"Arduino AVR boards\", and then \"Arduino Mega or Mega 2560\". Then select \"Processor\" and make sure it says \"ATMega2560\" Last, select \"Port\" and find the port on your computer that recognizes the Arduino. If you don't see a port listed there and are using a clone board, you may have to install a driver for a CH340 USB chip that is on these boards. See here Upload the software We are finally ready for the last step that will complete your Command Station. Click on the upload button near the top left. If is a circle with a right arrow next to the compile button that looks like a check mark. The IDE will go through a compile process which will build all the files into an application the Arduino can run and upload it. You may see many lines of logging as it finishes its task. When done, it will upload the file to the Arduino which you may see as some lights blinking on the Arduino. Make sure there are no errors in the log window and that it shows \"SUCCESS\" and a listing of how much memory is used on the Arduino. If you see errors, try our troubleshooting steps here or contact us on Discord . Don't unplug the serial cable yet! Plug in your power adapters You should already have the 7-9V adapter plugged into the Arduino and the 13-14V adapter plugged into the motor shield. Now you can plug both of them into the power socket. Nothing should happen. Be sure that nothing bad happens like heat or smoke. If anything seems wrong, unplug the power adapters immediately. Use the Serial Monitor to do a quick test The Arduino IDE has a built in serial monitor. That means that in addition to uploading updates to your Command Station, we can interact with it. Select \"Tools -> Serial Monitor\". Make sure the baud rate at the lower right of the window is set to 115200. Make sure the dropdown next to that says \"Both NL & CR\". That makes sure you send a new line command and carriage return which the Arduino expects. You should see log information immediately display in the window. If you have a Network shield or WiFi shield connected, you will see the CS setup its AP or connect to your network if you gave it your credentials. If you don't have a network, that's fine, the CS will sense that, the network test will fail, but everything else will be working as it should. Type in a command or two There is an entire language that DCC-EX understands. We call this the DCC-EX API for \"Application Programming Language\". If you are interested, the list of all the commands is here . Let's just try two commands to make sure everything is working. All DCC-EX commands begin with a less than sign and end with a greater than sign. In the command window, type \"<1>\" without the quotes and press the \"send\" button. Power should come on to the main track. You should see 2 red leds light on the \"A\" power output. If not, try the troubleshooting steps here Now enter \"<s>\" . That is a lowercase \"s\". You should see status information for your command station appear in the log. Turn off the power to the track by sending \"<0>\" to the CS. That is a \"zero\". Exit the Arduino IDE software . Run you trains! Making sure power is off to your track, place your DCC enabled loco (not DCC ready! Ready just means it has the plumbing inside the loco to install an optional DCC decoder, but it is NOT yet DCC compatible). Now either download our exWebThrottle found here and run it in your browser, or follow the instructions on that page to enable chromium \"experimental features\" and run exWebThrottle from our server just like you would any web page. Follow the instructions for using exWebThrottle. You should be able to find the CS and enable it, then turn on the track power, then acquire your loco by its ID. After that, you should be able to use the throttle slider and function buttons to operate you locomotive! NEXT: Test with exWebThrottle exWebThrottle Page link to using WiFi and Engine driver - coming soon linnk to using JMRI - coming soon","title":"Basic Setup"},{"location":"start/basic-setup/#basic-setup-using-the-arduino-ide","text":"The Arduino IDE is an \"Integrated Development Environment\". Don't let the name scare you away from giving it a try, it is really just a program that lets you open a project, like our DCC++ EX Software files, compile them into instructions the Arduino understands, and uploads them from your computer into the Arduino using a serial cable. It is extremely easy to use. If you are a Tinkerer or an Engineer (See levels/path choice ), You may want to make changes to the code or just learn more about how the Command Station software works. At a minimum, you may need to change options in the config file or use the IDE's \"Serial Monitor\" to monitor your CS, get logs if somethign if something is not working, or enter commands to test out features.","title":"Basic Setup using the Arduino IDE"},{"location":"start/basic-setup/#download-and-install-the-arduino-ide","text":"Rather than go into details that are already covered in great detail on the Arduino web page, just follow the instructions in the following link and then return here. Arduino IDE Guide","title":"Download and install the Arduino IDE"},{"location":"start/basic-setup/#download-the-dcc-ex-zip-file","text":"Use the link to either the zip file or at the botom of our Github page here: DCC++ EX Download Page","title":"Download the DCC++ EX zip file"},{"location":"start/basic-setup/#unzip-the-file-into-the-arduino-ide-project-folder","text":"Find the location to where you downloaded the zip file (usually the \"downloads\" folder) on your computer and unzip it to the Arduino projects folder, called the \"sketchbook folder\". Arduino likes to call \"programs\" \"sketches\". The default name of the Sketchbook folder is \u201cArduino\u201d and the default location of the Sketchbook folder is in the \u201cMy Documents\u201d folder (or just \u201cDocuments\u201d for Mac users). Make sure the path is correct. You should now have a <documents/arduino/CommandStation-EX> folder with the entire DCC-EX project inside it.","title":"Unzip the file into the Arduino IDE project folder"},{"location":"start/basic-setup/#copy-the-configexampleh-file-or-rename-it","text":"DCC-EX provides you with an example configuration file. This file holds settings that you can change for things like your choice of motor controller, Wifi login credentials, etc. Rather than a future update potentially have you lose any changes you make to your configuration, we give this file a different name and leave it up to you to edit if you need to. Therefore, copy this file and name it's clone \"config.h\" or simply rename this file to \"config.h\".","title":"Copy the config.example.h file or rename it"},{"location":"start/basic-setup/#run-the-arduino-ide-program","text":"Find the Arduino IDE program on your Start Menu/Mac Finder, etc. and open the application. You will see this screen:","title":"Run the Arduino IDE Program"},{"location":"start/basic-setup/#open-the-commandstation-ex-project","text":"Choose \"File -> Open\" from the menu and then click on the \"CommandStation-EX\" sketch folder to open it. Scroll down to the \"CommandStation.ino\" file (It should have the round, blue Arduino logo on it) and open that file. We also provide example .ino files for those Tinkerers or Engineers who want to use optional features like the \"User Command Override\" feature, high current motor boards, etc. But for now, and for most users, this will be all you need.","title":"Open the CommandStation-EX Project"},{"location":"start/basic-setup/#install-the-dio2h-library","text":"From the \"Tools\" menu, select \"Lirary Manager\". It may take a few seconds for it to load the list of all the libraries. Libraries are shared pieces of code that can be used by sketches to add functionality without someone having to write them from scratch. Type \"DIO2\" into the search box. You should then see a box below with \"DIO2\" by Thierry Paris of Locduino. Click \"Install\" to install this library. After it installs, close the libary manger window and go back to the main window.","title":"Install the DIO2.h Library"},{"location":"start/basic-setup/#edit-the-configh-file-optional","text":"If you are using the standard Arduino Motor Shield and if optionally using one of the supported Wifi boards and want to connect directly to the Command Station in Access Point Mode (AP) from your WiFi controller , there is nothing to do! Just upload the software to the Command Station in the next step. If you are using a different motor shield or motor controller board or if you wish to connect your CS to your home network instead of having a separate access point, click here for more detailed instructions on how to edit your config.h file If you want to take a look at this file or make a simple change, just open the file and take a look. You should see many files open in tabs at the top of the IDE Window. Find the down facinng triangle near the upper right of the window and click on it to open the entire list of files. Scroll down to near the bottom and click on the \"config.h\" file you renamed in the previous step to open it in the editing window. If you are sure of your changes, make sure to click on \"file -> save\" from the top menu to save them.","title":"Edit the config.h file (optional)"},{"location":"start/basic-setup/#select-the-board-type-and-com-port","text":"Before you attempt this step, make sure that you have everything connected properly from the . And a final reminder to make sure you cut the Vin trace on the bottom of the Arduino Motor Shield. Ready? Then proceed. Connect the computer to the Arduino with the USB cable. Note the 5V coming from your computer/raspberry Pi is enough to power the Mega temporarily since it bypasses the regulator that converts your 7-9V power supply down to 5V and goes right to the 5V bus on the board. So don't be alarmed by lights on your Arduino. From the \"tools\" menu select the \"board\" menu, then \"Arduino AVR boards\", and then \"Arduino Mega or Mega 2560\". Then select \"Processor\" and make sure it says \"ATMega2560\" Last, select \"Port\" and find the port on your computer that recognizes the Arduino. If you don't see a port listed there and are using a clone board, you may have to install a driver for a CH340 USB chip that is on these boards. See here","title":"Select the board type and com port"},{"location":"start/basic-setup/#upload-the-software","text":"We are finally ready for the last step that will complete your Command Station. Click on the upload button near the top left. If is a circle with a right arrow next to the compile button that looks like a check mark. The IDE will go through a compile process which will build all the files into an application the Arduino can run and upload it. You may see many lines of logging as it finishes its task. When done, it will upload the file to the Arduino which you may see as some lights blinking on the Arduino. Make sure there are no errors in the log window and that it shows \"SUCCESS\" and a listing of how much memory is used on the Arduino. If you see errors, try our troubleshooting steps here or contact us on Discord . Don't unplug the serial cable yet!","title":"Upload the software"},{"location":"start/basic-setup/#plug-in-your-power-adapters","text":"You should already have the 7-9V adapter plugged into the Arduino and the 13-14V adapter plugged into the motor shield. Now you can plug both of them into the power socket. Nothing should happen. Be sure that nothing bad happens like heat or smoke. If anything seems wrong, unplug the power adapters immediately.","title":"Plug in your power adapters"},{"location":"start/basic-setup/#use-the-serial-monitor-to-do-a-quick-test","text":"The Arduino IDE has a built in serial monitor. That means that in addition to uploading updates to your Command Station, we can interact with it. Select \"Tools -> Serial Monitor\". Make sure the baud rate at the lower right of the window is set to 115200. Make sure the dropdown next to that says \"Both NL & CR\". That makes sure you send a new line command and carriage return which the Arduino expects. You should see log information immediately display in the window. If you have a Network shield or WiFi shield connected, you will see the CS setup its AP or connect to your network if you gave it your credentials. If you don't have a network, that's fine, the CS will sense that, the network test will fail, but everything else will be working as it should.","title":"Use the Serial Monitor to do a quick test"},{"location":"start/basic-setup/#type-in-a-command-or-two","text":"There is an entire language that DCC-EX understands. We call this the DCC-EX API for \"Application Programming Language\". If you are interested, the list of all the commands is here . Let's just try two commands to make sure everything is working. All DCC-EX commands begin with a less than sign and end with a greater than sign. In the command window, type \"<1>\" without the quotes and press the \"send\" button. Power should come on to the main track. You should see 2 red leds light on the \"A\" power output. If not, try the troubleshooting steps here Now enter \"<s>\" . That is a lowercase \"s\". You should see status information for your command station appear in the log. Turn off the power to the track by sending \"<0>\" to the CS. That is a \"zero\". Exit the Arduino IDE software .","title":"Type in a command or two"},{"location":"start/basic-setup/#run-you-trains","text":"Making sure power is off to your track, place your DCC enabled loco (not DCC ready! Ready just means it has the plumbing inside the loco to install an optional DCC decoder, but it is NOT yet DCC compatible). Now either download our exWebThrottle found here and run it in your browser, or follow the instructions on that page to enable chromium \"experimental features\" and run exWebThrottle from our server just like you would any web page. Follow the instructions for using exWebThrottle. You should be able to find the CS and enable it, then turn on the track power, then acquire your loco by its ID. After that, you should be able to use the throttle slider and function buttons to operate you locomotive! NEXT: Test with exWebThrottle exWebThrottle Page link to using WiFi and Engine driver - coming soon linnk to using JMRI - coming soon","title":"Run you trains!"},{"location":"start/dccpp-jmri/","text":"DCC++ and JMRI Setup Work in progress","title":"JMRI Setup"},{"location":"start/dccpp-jmri/#dcc-and-jmri-setup","text":"Work in progress","title":"DCC++ and JMRI Setup"},{"location":"start/diy-starter-kit/","text":"DCC++ EX Starter Kit This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed NOTE: Keep in mind that if you just want to run trains and start without the separate Raspberry Pi and JMRI, you purchase just the Arduino Mega and Motorshield combination and use exWebThrottle. Suppliers list coming soon What You Will Need A \"main\" track aka \"operations\" track - most people already have this, it's your layout A \"programming\" track aka \"service\" track - a short section of track that you will use to program locomotives and other pieces equipment that use \"accessory decoders\" A known-good locomotive equipped with a DCC decoder. You may want this to have sound capability Equipment List: Hardware A compatible Arduino Board Arduino Mega (clones work too) Arduino UNO R3 (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) to connect your Pi or computer to the Arduino A MicroSD Card (for the Raspberry Pi if you choose to use one) Computer to act as a controller to the Arduino Base Station * We recommend: Elegoo Mega 2560 Deek-Robot Motor Shield 12V 5Amp Power Supply Raspberry Pi 4B NOTE: You may use your own computer instead of the Raspberry Pi. However, the image software below saves you installing software on your computer and does a lot more. See: \"My Computer vs. Raspberry Pi\" You can check Amazon, Ebay, AliExpress, Banggood, Adafruit and others for all the above Software DCC++ EX Installer Steve Todd's Raspberry Pi Image JMRI (If you want to use your own computer) Arduino Software IDE to edit and upload changes (Optional) * As mentioned above you can also use your existing computer (PC or MAC) instead of a Pi. You need a computer or Pi to run JMRI and connect to the Arduino to run your trains. A laptop or similar is needed in any case because you are going to need one to download the installer and the Raspebrry Pi image. You will then use it to run the installer to ccopy the program into the Arduino and copy the Raspberry Pi image you download to the MicroSD Card. NOTE: Optionally, you may just use the computer to download and burn the SDCard and then use the Pi to install the firmware onto the Arduino using our Installer. Next Page: Assembly","title":"Starter Kit"},{"location":"start/diy-starter-kit/#dcc-ex-starter-kit","text":"This guide is designed for do-it-yourselfers to build their own system. Anyone can do it, however if you don't feel technically inclined or just want to save the time, you can purchase a starter kit that contains: Controller: A Raspberry Pi with SD Card already configured with everything you need including the JMRI software. Base Station: An Arduino with DCC++ software already uploaded and a Motor Controller Shield prepped and installed NOTE: Keep in mind that if you just want to run trains and start without the separate Raspberry Pi and JMRI, you purchase just the Arduino Mega and Motorshield combination and use exWebThrottle. Suppliers list coming soon","title":"DCC++ EX Starter Kit"},{"location":"start/diy-starter-kit/#what-you-will-need","text":"A \"main\" track aka \"operations\" track - most people already have this, it's your layout A \"programming\" track aka \"service\" track - a short section of track that you will use to program locomotives and other pieces equipment that use \"accessory decoders\" A known-good locomotive equipped with a DCC decoder. You may want this to have sound capability","title":"What You Will Need"},{"location":"start/diy-starter-kit/#equipment-list","text":"","title":"Equipment List:"},{"location":"start/diy-starter-kit/#hardware","text":"A compatible Arduino Board Arduino Mega (clones work too) Arduino UNO R3 (clones work too) Arduino Nano A compatible motor driver shield Arduino Motor Driver Shield Rev 3 (clones work too) Pololu MC33926 Dual Motor Driver Shield (https://www.pololu.com/product/2503) Other boards listed in the hardware section DC Power Supply (see Power Supplies ) USB A to B Cable (aka USB Printer Cable) to connect your Pi or computer to the Arduino A MicroSD Card (for the Raspberry Pi if you choose to use one) Computer to act as a controller to the Arduino Base Station * We recommend: Elegoo Mega 2560 Deek-Robot Motor Shield 12V 5Amp Power Supply Raspberry Pi 4B NOTE: You may use your own computer instead of the Raspberry Pi. However, the image software below saves you installing software on your computer and does a lot more. See: \"My Computer vs. Raspberry Pi\" You can check Amazon, Ebay, AliExpress, Banggood, Adafruit and others for all the above","title":"Hardware"},{"location":"start/diy-starter-kit/#software","text":"DCC++ EX Installer Steve Todd's Raspberry Pi Image JMRI (If you want to use your own computer) Arduino Software IDE to edit and upload changes (Optional) * As mentioned above you can also use your existing computer (PC or MAC) instead of a Pi. You need a computer or Pi to run JMRI and connect to the Arduino to run your trains. A laptop or similar is needed in any case because you are going to need one to download the installer and the Raspebrry Pi image. You will then use it to run the installer to ccopy the program into the Arduino and copy the Raspberry Pi image you download to the MicroSD Card. NOTE: Optionally, you may just use the computer to download and burn the SDCard and then use the Pi to install the firmware onto the Arduino using our Installer. Next Page: Assembly","title":"Software"},{"location":"start/firebox/","text":"","title":"Firebox"},{"location":"start/installer-setup/","text":"Installer Setup Requirements Windows/Linux/MacOS Computer DCC-EX Compatible motor shield / motor controller board DCC-EX Compatible Microcontroller such as Arduino Mega/Uno or SparkFun SAM21 Development board USB cable to connect your computer to the Microcontroller Trains To run on Windows Download files depends on your system Windows 64bit Installer Windows 32bit Installer Extract the Installer into its own folder Open the folder and run the BaseStationInstaller.exe To run on MacOSX Download MacOSX Installer MacOSX Installer Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller To run on Linux (including the Raspberry Pi) Download Linux Installer Linux Installer Download and Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller In the left column dropdown selector boxes choose the following options: Select your Arduino Board Select your Motor Shield Select your com port Select your networking method if you have a Network shield or Wifi Shield installed Press \"Install\" Use the Arduino IDE Serial Monitor to test Use exWebThrottle to test Use Engine Driver (WiThrottle) to test if you installed WiFi","title":"Installer Setup"},{"location":"start/installer-setup/#installer-setup","text":"","title":"Installer Setup"},{"location":"start/installer-setup/#requirements","text":"Windows/Linux/MacOS Computer DCC-EX Compatible motor shield / motor controller board DCC-EX Compatible Microcontroller such as Arduino Mega/Uno or SparkFun SAM21 Development board USB cable to connect your computer to the Microcontroller Trains","title":"Requirements"},{"location":"start/installer-setup/#to-run-on-windows","text":"Download files depends on your system Windows 64bit Installer Windows 32bit Installer Extract the Installer into its own folder Open the folder and run the BaseStationInstaller.exe","title":"To run on Windows"},{"location":"start/installer-setup/#to-run-on-macosx","text":"Download MacOSX Installer MacOSX Installer Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller","title":"To run on MacOSX"},{"location":"start/installer-setup/#to-run-on-linux-including-the-raspberry-pi","text":"Download Linux Installer Linux Installer Download and Extract the Installer into its own folder. Open a terminal window and navigate to that folder Run the following command dotnet BaseStationInstaller In the left column dropdown selector boxes choose the following options: Select your Arduino Board Select your Motor Shield Select your com port Select your networking method if you have a Network shield or Wifi Shield installed Press \"Install\" Use the Arduino IDE Serial Monitor to test Use exWebThrottle to test Use Engine Driver (WiThrottle) to test if you installed WiFi","title":"To run on Linux (including the Raspberry Pi)"},{"location":"start/levels/","text":"Choose Your Path We have broken down who are users are into three categories and created different paths to navigate our DCC-EX system and this website. Don't worry, the paths are integrated and you can \"switch a turnout\" at any point and take another path. See below if you most identify with being a, \"Conductor\", a \"Tinkerer\" or an \"Engineer\". Conductor - An Conductor mostly just wants to enjoy operating trains. You could be someone new to trains or picking it up after a long absence, or you could be someone coming from running DC and looking to switch over to DCC. This is also the perfect place for someone who just wants something that works without much tinkering. We provide an \"out of the box\" working solution that gives you a Command Station and a Controller and you are up and running in just a few minutes. In short, a conductor wants to drive trains and doesn't want to have to deal with the details of the hardware or software involved. This path will keep things simple. Tinkerer - A Tinkerer likes the joy of building things themselves. They may not have an Engineering Degree, but they know how to connect a jumper wire and possibly use a soldering iron. They don't have a problem opening something like the Arduino IDE to change settings in a configuration file and upload it back to their Command Station. A Tinkerer wants to do more with model trains like using different motor controllers or getting into more detailed control of turnouts, sensors and other accessories. You may still use our standard Command Station kit, but many of you will build your own Command Station using an Arduino board and a Motor Shield. This path will provide more options over the Conductor path and cover things like using the JMRI software (Java Model Railroad Interface) for more advanced control of your locomotives and your track. Engineer - An Engineer is a little more versed in computers and/or electronics. They have a desire to dig a little deeper into how things work. They can understand the basics of computer code and can look at the DCC++ EX program to at least make simple changes. They may want to help with offering their talents to the project. They are not averse to experimenting with things to make something work. These are the people whose layout looks like a telephone switching station when you look under their benchwork. This path will offer more technical information and cover more in depth topics like accessory control and customizing the DCC++ EX System. Keep these definitions in mind as you proceed through this website. Here is your first choice: You want to use a FireBox Command Station You want to put your Command Station together yourself using an Arduino board","title":"Choose your Path"},{"location":"start/levels/#choose-your-path","text":"We have broken down who are users are into three categories and created different paths to navigate our DCC-EX system and this website. Don't worry, the paths are integrated and you can \"switch a turnout\" at any point and take another path. See below if you most identify with being a, \"Conductor\", a \"Tinkerer\" or an \"Engineer\". Conductor - An Conductor mostly just wants to enjoy operating trains. You could be someone new to trains or picking it up after a long absence, or you could be someone coming from running DC and looking to switch over to DCC. This is also the perfect place for someone who just wants something that works without much tinkering. We provide an \"out of the box\" working solution that gives you a Command Station and a Controller and you are up and running in just a few minutes. In short, a conductor wants to drive trains and doesn't want to have to deal with the details of the hardware or software involved. This path will keep things simple. Tinkerer - A Tinkerer likes the joy of building things themselves. They may not have an Engineering Degree, but they know how to connect a jumper wire and possibly use a soldering iron. They don't have a problem opening something like the Arduino IDE to change settings in a configuration file and upload it back to their Command Station. A Tinkerer wants to do more with model trains like using different motor controllers or getting into more detailed control of turnouts, sensors and other accessories. You may still use our standard Command Station kit, but many of you will build your own Command Station using an Arduino board and a Motor Shield. This path will provide more options over the Conductor path and cover things like using the JMRI software (Java Model Railroad Interface) for more advanced control of your locomotives and your track. Engineer - An Engineer is a little more versed in computers and/or electronics. They have a desire to dig a little deeper into how things work. They can understand the basics of computer code and can look at the DCC++ EX program to at least make simple changes. They may want to help with offering their talents to the project. They are not averse to experimenting with things to make something work. These are the people whose layout looks like a telephone switching station when you look under their benchwork. This path will offer more technical information and cover more in depth topics like accessory control and customizing the DCC++ EX System. Keep these definitions in mind as you proceed through this website. Here is your first choice: You want to use a FireBox Command Station You want to put your Command Station together yourself using an Arduino board","title":"Choose Your Path"},{"location":"start/rail-networking/","text":"Rail Networking Setup Work in progress","title":"Rail Networking"},{"location":"start/rail-networking/#rail-networking-setup","text":"Work in progress","title":"Rail Networking Setup"},{"location":"start/wifi-setup/","text":"WiFi Setup Work in progress","title":"WIFI setup"},{"location":"start/wifi-setup/#wifi-setup","text":"Work in progress","title":"WiFi Setup"},{"location":"support/create-ticket-form/","text":"","title":"Create Support Ticket"},{"location":"support/get-support/","text":"How To Get Support You can best reach us on our Discord server. You can also send an email to support@dcc-ex.com or use the form at using the \"get support\" link to the left\". We try to follow FaceBook and JMRI groups, but there are just too many separate groups to see and respond to all the message. Thank you for your support! DCC++ EX Trainboard Forum DCC++ EX Discord Server","title":"How To Get Support"},{"location":"support/get-support/#how-to-get-support","text":"You can best reach us on our Discord server. You can also send an email to support@dcc-ex.com or use the form at using the \"get support\" link to the left\". We try to follow FaceBook and JMRI groups, but there are just too many separate groups to see and respond to all the message. Thank you for your support! DCC++ EX Trainboard Forum DCC++ EX Discord Server","title":"How To Get Support"},{"location":"throttles/ex-webthrottle/","text":"DCC++ EX Web Throttle This is a new DCC++ EX Throttle/Controller that can connect to the DCC++ EX Commmand Station directly through the USB port of a computer. What you need to setup the project Chromium-Based Browser version 80 or above (Chrome, Opera, Edge) You must enable the experimental Web Serial API To enable the Web Serial API, in your browser URL bar type: chrome://flags Then set the #enable-experimental-web-platform-features flag by looking on the page for \"Experimental Web Platform Features\" and click on the \"enable\" button. Note : Substitute the name of your browser above if you don't use Chrome What you\u2019ll need to use this application You don't need anything to test it out and to run in emulator mode, to run trains you will need: An Arduino Mega or Uno Microcontroller An Arduino Motor Control Shield Chromium based browser version 80 or later Getting started NOTE: If you don't have your hardware yet or just want to play with the throttle and see commands being sent to the log window, you can skip to the operation section. To get started, connect your Command Station to a computer that has a USB port and have a compatible browser installed. Use a USB serial cable from your computer to the serial connector on the Arduino. Click on the \"index.html\" or \"exwebthrotle.html\" file to load the webpage. Operation To use the program, you can either click on the \"Serial\" dropodown button and select \"Emulator\" to run in emulator mode or after making sure your hardware is properly connected, make sure \"Serial\" is selected and click on the \"Connect DCC++ EX\" button. If the program finds a compatible device, it will open a popup a window showing you a selection. It may show a line at the top such as \"Arduino Mega 2560 (COM3)\". Your com port may vary. Click on your board to select it and then click the \"Connect DCC++ EX\" button. You should then be connected to the Command Station (CS) and should see the response from the CS on the web page under the buttons. Make sure your debug console is open. If it isn't, use the slider button in the lower left to open it. You can also open the DevTools window in your browser to see more developer logging. Once you are connected, you can enter the <s> command in the \"direct command\" textbox to get status information from your Command Station. To do this just enter s (without the quotes) and press the SEND button. You can send any DCC++ API command in this way. You should see returned in the log window with your version, type of arduino, type of motor shield, and some other information. Now you are ready to run trains! Place your loco on the track and click the power slider button to turn on power to your track. You should see lights on your Arduino Motor Shield and an indication that your loco has power. Next go to the \"Locomotive ID\" textbox and enter the address of your loco and press the \"Acquire\" button. You should now have full control over your loco. All the function buttons should be working, so you can play with the headlight, horn and bell and any other function assigned to a function button. The commands being sent to the CS and its responses will display in the log window if it is open In the throttle control area to the left of the function buttons are vertical controls to control direction. The up arrow selects forward, the square button is stop and the down arrow is reverse. The circular control or vertical slider (chosen by the throttle select slider) can be moved by clicking and holding down the mouse button and dragging, clicking at a spot where you want the throttle to move, or clicking the + and - buttons. The options button lets you save labels to go on your function buttons for each of your locos. We will be updating this document soon to give you more information on this and other new features. Note: The emulator doesn't fully replicate the Command station yet. This means that althought the software works, not all the responses will be shown in the debug console. We are currently working on this, so it is something that will be fixed. Try it now Just click this button and it will load a web page from our server that will run the web throttle on your machine. You can connect it to DCC++ EX or just run it in emulator mode where you don't have to have any hardware. Please read the instructions above for what is required to run exWebThrottle in your browser. Run exWebThrottle Now Download Just download this zip file and extract it to any folder you have run permission on. Then run the exwebthrottle.html file. exWebThrottle Zip File Going Further / Developing If you want to really delve into how this works and help us improve it with your comments or your development skills, please contact us. To load the Chrome DevTools to look at logging and be able to manually enter \"write\" commands for testing, click on the Menu (the 3 vertical dots in the upper right hand corner of the Chrome Window), then select \"more tools\" and then \"Developer Tools\". Or you can just hit \"Ctrl-Shift-I\". License Copyright 2020 DCC-EX Licensed under the GNU open source licese. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. DCC-EX","title":"exWebThrottle"},{"location":"throttles/ex-webthrottle/#dcc-ex-web-throttle","text":"This is a new DCC++ EX Throttle/Controller that can connect to the DCC++ EX Commmand Station directly through the USB port of a computer.","title":"DCC++ EX Web Throttle"},{"location":"throttles/ex-webthrottle/#what-you-need-to-setup-the-project","text":"Chromium-Based Browser version 80 or above (Chrome, Opera, Edge) You must enable the experimental Web Serial API To enable the Web Serial API, in your browser URL bar type: chrome://flags Then set the #enable-experimental-web-platform-features flag by looking on the page for \"Experimental Web Platform Features\" and click on the \"enable\" button. Note : Substitute the name of your browser above if you don't use Chrome","title":"What you need to setup the project"},{"location":"throttles/ex-webthrottle/#what-youll-need-to-use-this-application","text":"You don't need anything to test it out and to run in emulator mode, to run trains you will need: An Arduino Mega or Uno Microcontroller An Arduino Motor Control Shield Chromium based browser version 80 or later","title":"What you\u2019ll need to use this application"},{"location":"throttles/ex-webthrottle/#getting-started","text":"NOTE: If you don't have your hardware yet or just want to play with the throttle and see commands being sent to the log window, you can skip to the operation section. To get started, connect your Command Station to a computer that has a USB port and have a compatible browser installed. Use a USB serial cable from your computer to the serial connector on the Arduino. Click on the \"index.html\" or \"exwebthrotle.html\" file to load the webpage.","title":"Getting started"},{"location":"throttles/ex-webthrottle/#operation","text":"To use the program, you can either click on the \"Serial\" dropodown button and select \"Emulator\" to run in emulator mode or after making sure your hardware is properly connected, make sure \"Serial\" is selected and click on the \"Connect DCC++ EX\" button. If the program finds a compatible device, it will open a popup a window showing you a selection. It may show a line at the top such as \"Arduino Mega 2560 (COM3)\". Your com port may vary. Click on your board to select it and then click the \"Connect DCC++ EX\" button. You should then be connected to the Command Station (CS) and should see the response from the CS on the web page under the buttons. Make sure your debug console is open. If it isn't, use the slider button in the lower left to open it. You can also open the DevTools window in your browser to see more developer logging. Once you are connected, you can enter the <s> command in the \"direct command\" textbox to get status information from your Command Station. To do this just enter s (without the quotes) and press the SEND button. You can send any DCC++ API command in this way. You should see returned in the log window with your version, type of arduino, type of motor shield, and some other information. Now you are ready to run trains! Place your loco on the track and click the power slider button to turn on power to your track. You should see lights on your Arduino Motor Shield and an indication that your loco has power. Next go to the \"Locomotive ID\" textbox and enter the address of your loco and press the \"Acquire\" button. You should now have full control over your loco. All the function buttons should be working, so you can play with the headlight, horn and bell and any other function assigned to a function button. The commands being sent to the CS and its responses will display in the log window if it is open In the throttle control area to the left of the function buttons are vertical controls to control direction. The up arrow selects forward, the square button is stop and the down arrow is reverse. The circular control or vertical slider (chosen by the throttle select slider) can be moved by clicking and holding down the mouse button and dragging, clicking at a spot where you want the throttle to move, or clicking the + and - buttons. The options button lets you save labels to go on your function buttons for each of your locos. We will be updating this document soon to give you more information on this and other new features. Note: The emulator doesn't fully replicate the Command station yet. This means that althought the software works, not all the responses will be shown in the debug console. We are currently working on this, so it is something that will be fixed.","title":"Operation"},{"location":"throttles/ex-webthrottle/#try-it-now","text":"Just click this button and it will load a web page from our server that will run the web throttle on your machine. You can connect it to DCC++ EX or just run it in emulator mode where you don't have to have any hardware. Please read the instructions above for what is required to run exWebThrottle in your browser. Run exWebThrottle Now","title":"Try it now"},{"location":"throttles/ex-webthrottle/#download","text":"Just download this zip file and extract it to any folder you have run permission on. Then run the exwebthrottle.html file. exWebThrottle Zip File","title":"Download"},{"location":"throttles/ex-webthrottle/#going-further-developing","text":"If you want to really delve into how this works and help us improve it with your comments or your development skills, please contact us. To load the Chrome DevTools to look at logging and be able to manually enter \"write\" commands for testing, click on the Menu (the 3 vertical dots in the upper right hand corner of the Chrome Window), then select \"more tools\" and then \"Developer Tools\". Or you can just hit \"Ctrl-Shift-I\".","title":"Going Further / Developing"},{"location":"throttles/ex-webthrottle/#license","text":"Copyright 2020 DCC-EX Licensed under the GNU open source licese. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. DCC-EX","title":"License"},{"location":"tinker/tinkering/","text":"Tinker With DCC++ EX Work in progress","title":"Tinker with DCC EX"},{"location":"tinker/tinkering/#tinker-with-dcc-ex","text":"Work in progress","title":"Tinker With DCC++ EX"}]}